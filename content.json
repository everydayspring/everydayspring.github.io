{"pages":[{"title":"포트폴리오","text":"","link":"/about/index.html"}],"posts":[{"title":"R 시작하기","text":"통계와 그래픽을 위한 소프트웨어 무료 변수 (Variable) 변하는 수 소득 성별 학점 국적 1,000만 원 남자 3.8 대한민국 2,000만 원 남자 4.2 대한민국 3,000만 원 여자 2.6 대한민국 4,000만 원 여자 4.5 대한민국 소득, 성별 : 독립 변수 ( Independent Variable ) 학점 : 종속 변수 ( Dependent Variable ) 국적 : 상수 ( Constant ) 변수 생성1234567891011a &lt;- 1a## [1] 1b &lt;- 2b## [1] 2c &lt;- 3.5c## [1] 3.5 String1234567891011str1 &lt;- \"a\"str1## [1] \"a\"str2 &lt;- \"text\"str2## [1] \"text\"str3 &lt;- \"Hello World!\"str3## [1] \"Hello World!\" 변수 연산1234567891011a+b## [1] 34/b## [1] 25*b## [1] 10str1+2## Error in str1 + 2: non-numeric argumant to binary operator Vector c() : combine 1234567var1 &lt;- c(1, 2, 5, 7, 8)var1## [1] 1 2 5 7 8var2 &lt;- c(1:5) // 1~5까지 1씩 증가var2## [1] 1 2 3 4 5 1234567str4 &lt;- c(\"a\", \"b\", \"c\")str4## [1] \"a\" \"b\" \"c\"str5 &lt;- c(\"Hello!\", \"World\", \"is\", \"good!\")str5## [1] \"Hello!\" \"World\" \"is\" \"good!\" seq() : sequence 1234567var3 &lt;- seq(1,5) // 1~5까지 1씩 증가var3## [1] 1 2 3 4 5var4 &lt;- seq(1, 10, by = 3) // 1~10까지 3씩 증가var4## [1] 1 4 7 10 Vector 연산12345var1+2## [1] 3 4 7 9 10var1+var2##[1] 2 4 8 11 13 함수 값을 넣으면 특정한 기능을 수행해 처음과 다른 값이 출력됨 12345678910111213141516171819202122232425262728293031x &lt;- c(1, 2, 3)x## [1] 1 2 3# 함수 적용하기mean(x)## [1] 2max(x)## [1] 3min(x)## [1] 1str5## [1] \"Hello!\" \"World\" \"is\" \"good!\"paste(str5, callapse = \",\")## [1] \"Hello!,World,is,good!\"paste(str5, collapse = \" \")## [1] \"Hello! World is good!\"x_mean &lt;- mean(x)x_mean## [1] 2str5_paste &lt;- paste(str5, collapse = \" \")str5_paste## [1] \"Hello! World is good!\" 함수 꾸러미 ‘패키지(packages)’패키지 설치하기 &gt; 패키지 로드하기 &gt; 함수 사용하기 ggplot2 패키지 설치하기, 로드하기12345678910111213141516install.packages(\"ggplot2\") // ggplot2 패키지 설치library(ggplot2) // ggplot2 패키지 로드x &lt;- c(\"a\", \"a\", \"b\", \"c\")xqplot(x) # ggplot2패키지 함수qplot(data = mpg, x = hwy) # ggplot2 제공 데이터qplot(data = mpg, x = cty)qplot(data = mpg, x = drv, y = hwy) # x축, y축 지정qplot(data = mpg, x = drv, y = hwy, geom = \"line\") # 그래프 형태 지정qplot(data = mpg, x = drv, y = hwy, geom = \"boxplot\")qplot(data = mpg, x = drv, y = hwy, geom = \"boxplot\", colour = drv)?qplot","link":"/2020/07/13/R-2020-07-13-Rstart/"},{"title":"R 데이터프레임","text":"데이터 프레임 이해하기 이름 영어 점수 수학 점수 김지훈 90 50 이유진 80 60 박동현 60 100 김민지 70 20 ‘열’ 속성 / ‘행’ 한 사람의 정보 123456789101112131415161718192021222324252627english &lt;- c(90, 80, 60, 70)english## [1] 90 80 60 70math &lt;- c(50, 60, 100, 20)math## [1] 50 60 100 20class &lt;- c(1, 1, 2, 2)class## [1] 1 1 2 2df_midterm &lt;- data.frame(english, math, class)df_midterm## english math class## 1 90 50 1## 2 80 60 1## 3 60 100 2## 4 70 20 2mean(df_midterm$english)mean(df_midterm$math)df_midterm &lt;- data.frame(english = c(90, 80, 60, 70), math = c(50, 60, 100, 20), class = c(1, 1, 2, 2))df_midterm 외부 데이터 가져오기1234567891011121314151617181920install.packages(\"readxl\")library(readxl)getwd() # 웨킹 디렉토리 확인df_exam &lt;- read_excel(\"excel_exam.xlsx\")df_exammean(df_exam$english)mean(df_exam$science)df_exam_novar &lt;- read_excel(\"excel_exam_novar.xlsx\", col_names = F)df_exam_novardf_exam_sheet &lt;- read_excel(\"excel_exam_sheet.xlsx\", sheet = 3)df_exam_sheetdf_csv_exam &lt;- read.csv(\"csv_exam.csv\")df_csv_exam &lt;- read.csv(\"csv_exam.csv\", stringsAsFactors = F)df_csv_exam 데이터 내보내기123456df_midterm &lt;- data.frame(english = c(90, 80, 60, 70), math = c(50, 60, 100, 20), class = c(1, 1, 2, 2))df_midtermwrite.csv(df_midterm, file = \"df_midterm.csv\") RData파일 활용하기 R 전용 데이터 파일 용량 작고 빠름 12345678910111213141516171819202122save(df_midterm, file = \"df_midterm.rda\")rm(df_midterm)df_midterm## 에러: 객체 'df_midterm'를 찾을 수 없습니다load(\"df_midterm.rda\")df_midterm## english math class## 1 90 50 1## 2 80 60 1## 3 60 100 2## 4 70 20 2# 변수에 할당df_exam &lt;- read_excel(\"excel_exam.xlsx\")df_csv_exam &lt;- read.csv(\"csv_exam.csv\")# Rda 파일 : 데이터 프레임 자동 생성load(\"df_midterm.rda\")","link":"/2020/07/14/R-2020-07-14-Data-Frame/"},{"title":"Hexo 블로그에 Google AdSense 적용하기","text":"사용하고 있는 테마 폴더의 ‘_config.yml’ 파일에서 애드센스 계정 설정을 해주면 된다 123456789# Google AdSense unit configurations- # Where should the widget be placed, left sidebar or right sidebar position: left type: adsense # AdSense client ID client_id: 'pub-1234567890123456' # AdSense AD unit ID slot_id: '1234567890' AdSense client_id, slot_id 웹게시자 ID : client_id 고객 ID : slot_id","link":"/2020/07/14/hexo-2020-07-14-Google-AdSense/"},{"title":"Hexo 시작하기","text":"준비하기 구름IDE 가입 github 가입 구름IDE 컨테이너 만들기 로그인 대시보드 -&gt; 새 컨테이너 생성 소프트웨어 스택 ‘Node.js’ 선택 hexo 설치123456$ npm install -g npm // npm 버전 업그레이드$ npm install hexo-cli -g$ hexo init hexoblog$ cd hexoblog$ npm install hexo 테마 다운로드12$ cd themes$ git clone [원하는 테마의 github 링크] hexo 테마 적용 _config.yml 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: [clone한 폴더명] 글 작성하기1$ hexo new post 'title' 구름IDE에서 호스팅하기1$ hexo server -p 3000 Github repository 생성‘[github_id].github.io’ 로 새로운 repository를 생성합니다 Github 연동 _config.yml123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: [생성한 git repository 주소 (.io까지)] branch: master Github 배포123456$ git config --global user.name [내 이름]$ git config --global user.email [github 계정]$ hexo clean$ hexo generate$ hexo deploy 참고 : 유튜브","link":"/2020/07/13/hexo-2020-07-13-HexoStart/"},{"title":"Git을 써라 제발!","text":"글을 쓰게된 이유우선 내 소개를 잠깐 해보자면 정보통신공학과를 전공했다. 졸업 후에는 1년 간 초등학생들에게 코딩을 가르쳤고 (리얼코딩, 스크래치), 현재는 대학원준비를 하면서 개발자, IT강사를 꿈꾸고 있다. 졸업 후 1년 6개월 가량 개발에 손을 떼었다가 공부를 처음부터 다시 시작해야 하는 상황이 되었다. 대학원 준비, 재취업 준비를 하면서 내가 1학년때 이걸 깨달았으면 얼마나 좋았을까 하는 것들이 있어 공유하고자 이 글을 작성하게 되었다. Git을 써라, 쓰세요, 제발 써주세요정확히 말하자면 Git과 클라우드 서비스를 많이 사용하라는 취지의 글이 될것 같은데,주변에 코딩을 시작하는 신입생이 있다면 달려가서 멱살을 잡고 흔들면서 당장 GitHub에 가입하라고 해주자. 타임머신이 있다면 1학년때로 돌아가서 나를 가둬놓고 5일간 굶기면서 클라우드 서비스를 쓰라고 세뇌 시킬거다. 대학교 4년간 수업과 연구실에서 세미나를 진행하면서 참 많은 공부를 했다 수업 C언어 객체지향프로그래밍 자료구조 Java Android 알고리즘 웹프로그래밍 데이터베이스 세미나 Front-end [HTML,css,JS,jQuery] Back-end [Node.js] Database [MySQL, PostgreSQL] ProgrammingLanguage [C, Java, Python, DesignPattern] Source manager [GitHub, SourceTree] Hardware [Arduino, RaspberryPi] Spring 운 좋게도 정말 좋은 연구실에 들어가서 다양한 분야를 경험해 볼 수 있었다. 물론 1회성 세미나도 있었고 내가 기억하지 못하는 세미나들도 많을거다. 물론 저것들을 다 할줄 아는것도 아니고 이것저것 많이 해봤다고 자랑하는 것도 아니다. 내가 말하고 싶은건 지금 나에게 남은게 하나도 없다는 점이다. 학부때는 강의실PC, 연구실PC, 노트북, 데스크탑을 옮겨가며 사용했고 쓸데없이 깔끔함이 이런데서 발휘되서 깨끗하게 지우고 다녔다. 연구실PC에 그나마 모아뒀던 자료들마저 연구실을 나오면서 다 날려버렸다. 정말 뼈저리게 후회한다 Git이 뭔데?‘Git’은 버전관리 시스템이다. 파일을 계속해서 주시하면서 모든 변화를 기록한다. Git에 올려뒀다면 코드를 작성하다가 언제든지 이전의 상태로 돌릴 수 있고, 여러명과 한 프로젝트를 작업하는데도 유용하게 쓰인다. ‘GitHub’는 클라우드에 있는 Git 제공자다. 내PC에 있는 Git 히스토리를 GitHub 웹사이트에 올려서 사용한다. GitHub를 통해서 다른사람이 내 코드를 가져갈 수도 있고 동시에 작업할 수도 있다. 물론 나도 다른사람의 코드를 확인하고 다운로드해서 활용할 수 있다. 뭐가 좋아요?파일의 버전관리, 협업을 잠시 치워두고 코딩을 막 시작한 사람의 관점에서 보자면 Git은 포트폴리오가 된다. 이게 가장 중요한 포인트다. ‘포트폴리오’가 된다! 내가 뭘배웠는지 하나하나 설명하지 않아도 GitHub를 보면 아 이사람이 이런 수업을 하고 이런 공부를 했구나를 보여줄수 있다. 따로 작성하지 않고 누구나 들어와서 볼 수있는 무료 포트폴리오가 되는 것이다. 실제로 GitHub를 보고 스카웃되는 경우도 있고, 많은 취업 이력서에 GitHub 주소를 적는 항목이 있다. GitHub에 얼마나 자료가 올라가는지 기록되는 잔디밭이 초록색으로 물들어가는 것을 보면서 뿌듯해 하자! 어떻게 쓰지 너무 어려워!사실 Git을 사용하는것이 쉽지는 않다. 처음 시작하면 add, push, clone, pull, branch … 다 무슨말인지 모르겠고 협업이라도 진행하려면 프로젝트 만들고 설정까지 하고 지쳐버린다. 하지만 쓰다보면 어떻게든 익숙해지고 그게 다 자산이 된다. 사용하기 쉽지 않은 만큼 많은 사람들이 질문하고 답변한다. 포기하지 말자! 사실 나도 아직 잘 모르겠다 Git… 친절하게 한글로 되어있는 사이트도 있다. 사실 코딩을 처음 시작하면 코딩하는 것보다 Git설정이 더 어렵고 오래걸린다. 정말 너무 힘들고 모르겠다면 GitHub에서 직접 파일을 업로드라도 해두자. 구글드라이브처럼 폴더를 만들고 파일들을 업로드 할 수 있다. 이런 방법으로라도 업로드 해두면 안하는 것보다 백배는 낫다! 프로그래밍 언어 강의 시간에 적은 ‘Hello World’부터 사소한 과제까지 내가 쓴 코드는 전부다!! 마치며Git뿐만 아니라 다양한 클라우드 서비스를 활용하자. 자료를 USB가 아닌 구글 드라이브나, 네이버 클라우드에 넣어두면 어디서든 언제든 PC,휴대폰만 있으면 확인이 가능하다. 얼마나 좋은가! usb는 공인인증서가 없어질때까지만 쓰자… 이 블로그도 클라우드 서비스를 이용하여 만들었다. 구름IDE에서 작성하고 GitHub에 배포하면 멋진 무료 블로그가 완성된다. 컴퓨터만 있으면 구름웹사이트에 접속해서 언제든지 글을 쓰고 블로그를 수정할 수 있다. 물론 보안상의 이유로 클라우드 서비스를 막아놓은 회사가 많지만 그럼에도 불구하고 우리는 많은 클라우드 서비스를 사용할 가치가 충분히 있다. 아무것도 설치하지 않아도 코딩을 할 수 있고, 어디서든 내 파일들을 조회할 수 있는 좋은 세상이다. 이런 주저리주저리 글로 Git을 사용해야 하는 이유가 잘 설명되었는지는 모르겠지만, 단 한 명이라도 읽고 뭔가 깨달았다면 성공이다. 지금 이 순간에도 무수히 많은 멋진 코드들이 클라우드 서비스에 올려지고 공유되고 있다. GitHub로 스카웃제의 오는 그날까지 화이팅!","link":"/2020/07/14/etc-2020-07-14-PleaseGit/"},{"title":"hexo 게시물 이미지 삽입","text":"먼저 다음과 같이 일반적인 방법으로 마크다운에 이미지를 넣고 실행하면 절대경로로 이미지가 로드되지만 게시물에 접근하는 경로에 따라 링크가 바뀌면서 사진이 뜨지 않는 경우가 생긴다. 1!(이미지 설명)[이미지 링크] ‘_config.yml’ 설정 변경1post_asset_folder: true post_asset_folder를 true로 변경하면 ‘hexo new (layout) [title]’명령어를 실행할 때마다 title과 동일한 이름의 폴더가 생성된다. 생성된 폴더에 이미지를 넣고 마크다운 문서에서 로드해주면 된다. 1{% asset_img image001.JPG %} 이미지를 매번 넣는 경우가 아니라면 설정을 false로 두고 필요할때만 title과 동일한 이름으로 폴더를 생성하여 사용하는 방법도 있다.","link":"/2020/07/14/hexo-2020-07-14-image/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/07/13/hexo-hello-world/"},{"title":"R 데이터 분석 기초","text":"데이터 파악하기 head() : 데이터 앞부분 출력 tail() : 데이터 뒷부분 출력 View() : 뷰어 창에서 데이터 확인 dim() : 데이터 차원 출력 (Dimension) str() : 데이터 속성 출력 (Structure) summary() : 요약통계량 출력 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566exam &lt;- read.csv(\"csv_exam.csv\")head(exam)## id class math english science## 1 1 1 50 98 50## 2 2 1 60 97 60## 3 3 1 45 86 78## 4 4 1 30 98 58## 5 5 2 25 80 65## 6 6 2 50 89 98head(exam, 10)## id class math english science## 1 1 1 50 98 50## 2 2 1 60 97 60## 3 3 1 45 86 78## 4 4 1 30 98 58## 5 5 2 25 80 65## 6 6 2 50 89 98## 7 7 2 80 90 45## 8 8 2 90 78 25## 9 9 3 20 98 15## 10 10 3 50 98 45tail(exam)## id class math english science## 15 15 4 75 56 78## 16 16 4 58 98 65## 17 17 5 65 68 98## 18 18 5 80 78 90## 19 19 5 89 68 87## 20 20 5 78 83 58tail(exam, 10)## id class math english science## 11 11 3 65 65 65## 12 12 3 45 85 32## 13 13 4 46 98 65## 14 14 4 48 87 12## 15 15 4 75 56 78## 16 16 4 58 98 65## 17 17 5 65 68 98## 18 18 5 80 78 90## 19 19 5 89 68 87## 20 20 5 78 83 58View(exam)dim(exam)## [1] 20 5str(exam)## 'data.frame': 20 obs. of 5 variables:## $ id : int 1 2 3 4 5 6 7 8 9 10 ...## $ class : int 1 1 1 1 2 2 2 2 3 3 ...## $ math : int 50 60 45 30 25 50 80 90 20 50 ...## $ english: int 98 97 86 98 80 89 90 78 98 98 ...## $ science: int 50 60 78 58 65 98 45 25 15 45 ...summary(exam)## id class math english science ## Min. : 1.00 Min. :1 Min. :20.00 Min. :56.0 Min. :12.00 ## 1st Qu.: 5.75 1st Qu.:2 1st Qu.:45.75 1st Qu.:78.0 1st Qu.:45.00 ## Median :10.50 Median :3 Median :54.00 Median :86.5 Median :62.50 ## Mean :10.50 Mean :3 Mean :57.45 Mean :84.9 Mean :59.45 ## 3rd Qu.:15.25 3rd Qu.:4 3rd Qu.:75.75 3rd Qu.:98.0 3rd Qu.:78.00 ## Max. :20.00 Max. :5 Max. :90.00 Max. :98.0 Max. :98.00 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960mpg &lt;- as.data.frame(ggplot2::mpg)head(mpg)## manufacturer model displ year cyl trans drv cty hwy fl class## 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compact## 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compact## 3 audi a4 2.0 2008 4 manual(m6) f 20 31 p compact## 4 audi a4 2.0 2008 4 auto(av) f 21 30 p compact## 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p compact## 6 audi a4 2.8 1999 6 manual(m5) f 18 26 p compacttail(mpg)## manufacturer model displ year cyl trans drv cty hwy fl class## 229 volkswagen passat 1.8 1999 4 auto(l5) f 18 29 p midsize## 230 volkswagen passat 2.0 2008 4 auto(s6) f 19 28 p midsize## 231 volkswagen passat 2.0 2008 4 manual(m6) f 21 29 p midsize## 232 volkswagen passat 2.8 1999 6 auto(l5) f 16 26 p midsize## 233 volkswagen passat 2.8 1999 6 manual(m5) f 18 26 p midsize## 234 volkswagen passat 3.6 2008 6 auto(s6) f 17 26 p midsizeView(mpg)dim(mpg)## [1] 234 11str(mpg)## 'data.frame': 234 obs. of 11 variables:## $ manufacturer: chr \"audi\" \"audi\" \"audi\" \"audi\" ...## $ model : chr \"a4\" \"a4\" \"a4\" \"a4\" ...## $ displ : num 1.8 1.8 2 2 2.8 2.8 3.1 1.8 1.8 2 ...## $ year : int 1999 1999 2008 2008 1999 1999 2008 1999 1999 2008 ...## $ cyl : int 4 4 4 4 6 6 6 4 4 4 ...## $ trans : chr \"auto(l5)\" \"manual(m5)\" \"manual(m6)\" \"auto(av)\" ...## $ drv : chr \"f\" \"f\" \"f\" \"f\" ...## $ cty : int 18 21 20 21 16 18 18 18 16 20 ...## $ hwy : int 29 29 31 30 26 26 27 26 25 28 ...## $ fl : chr \"p\" \"p\" \"p\" \"p\" ...## $ class : chr \"compact\" \"compact\" \"compact\" \"compact\" ...summary(mpg)## manufacturer model displ year ## Length:234 Length:234 Min. :1.600 Min. :1999 ## Class :character Class :character 1st Qu.:2.400 1st Qu.:1999 ## Mode :character Mode :character Median :3.300 Median :2004 ## Mean :3.472 Mean :2004 ## 3rd Qu.:4.600 3rd Qu.:2008 ## Max. :7.000 Max. :2008 ## cyl trans drv cty ## Min. :4.000 Length:234 Length:234 Min. : 9.00 ## 1st Qu.:4.000 Class :character Class :character 1st Qu.:14.00 ## Median :6.000 Mode :character Mode :character Median :17.00 ## Mean :5.889 Mean :16.86 ## 3rd Qu.:8.000 3rd Qu.:19.00 ## Max. :8.000 Max. :35.00 ## hwy fl class ## Min. :12.00 Length:234 Length:234 ## 1st Qu.:18.00 Class :character Class :character ## Median :24.00 Mode :character Mode :character ## Mean :23.44 ## 3rd Qu.:27.00 ## Max. :44.00 데이터 수정하기1234567891011121314151617181920212223242526install.packages(\"dplyr\")library(dplyr)?dplyrdf_raw &lt;- data.frame(var1 = c(1, 2, 1), var2 = c(2, 3, 3))df_raw## var1 var2## 1 1 2## 2 2 3## 3 1 3df_new &lt;- df_rawdf_new## var1 var2## 1 1 2## 2 2 3## 3 1 3df_new &lt;- rename(df_new, v2 = var2) # dplyr 함수, '새 변수명 = 기존 변수명'df_new## var1 v2## 1 1 2## 2 2 3## 3 1 3 실습123456789# Q1. ggplot2 패키지의 mpg 데이터를 사용할 수 있도록 불러온 뒤 복사본을 만드세요.mpg &lt;- as.data.frame(ggplot2::mpg)mpg_new &lt;- mpg# Q2. 복사본 데이터를 이용해서 cty는 city로, hwy는 highway로 변수명을 수정하세요.mpg_new &lt;- rename(mpg_new, city = cty, highway = hwy)# Q3. 데이터 일부를 출력해서 변수명이 바뀌었는지 확인해 보세요.head(mpg_new) 데이터에 새로운 변수 만들기12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758df &lt;- data.frame(var1 = c(4, 3, 8), var2 = c(2, 6, 1))df## var1 var2## 1 4 2## 2 3 6## 3 8 1df$var_sum &lt;- df$var1 + df$var2df## var1 var2 var_sum## 1 4 2 6## 2 3 6 9## 3 8 1 9df$var_mean &lt;- (df$var1 + df$var2)/2df## var1 var2 var_sum var_mean## 1 4 2 6 3.0## 2 3 6 9 4.5## 3 8 1 9 4.5# 각 차량의 연비의 평균 구하기mpg$total &lt;- (mpg$cty + mpg$hwy) / 2# 연비의 총 평균 구하기mean(mpg$total)## [1] 20.14957summary(mpg$total)## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 10.50 15.50 20.50 20.15 23.50 39.50 hist(mpg$total)# 연비에 따른 합겹 불합격 구분mpg$test &lt;- ifelse(mpg$total &gt;= 20, \"pass\", \"fail\")head(mpg, 10)head(mpg$test,20)## [1] \"pass\" \"pass\" \"pass\" \"pass\" \"pass\" \"pass\" \"pass\" \"pass\" \"pass\" \"pass\" \"pass\"## [12] \"pass\" \"pass\" \"pass\" \"pass\" \"fail\" \"pass\" \"fail\" \"fail\" \"fail\"# 합격, 불합격 갯수qplot(mpg$test)table(mpg$test)## fail pass ## 106 128 mpg$grade &lt;- ifelse(mpg$total &gt;= 30, \"A\", ifelse(mpg$total &gt;= 20, \"B\", \"c\"))head(mpg, 20)table(mpg$grade)## A B c ## 10 118 106 qplot(mpg$grade)mpg$grade2 &lt;- ifelse(mpg$total &gt;= 30, \"A\", ifelse(mpg$total &gt;= 25, \"B\", ifelse(mpg$total &gt;= 20, \"C\", \"D\"))) 실습123456789101112131415161718192021222324252627282930313233\"ggplot2 패키지에는 미국 동북중부 437개 지역의 인구통계 정보를 담은 midwest라는 데이터가 포함되어 있습니다. midwest 데이터를 사용해 데이터 분석 문제를 해결해보세요.\"# Q1.ggplot2의 midwest 데이터를 데이터 프레임 형태로 불러와서 데이터의 특성을 파악하세요.midwest &lt;- as.data.frame(ggplot2::midwest)midwesthead(midwest,5)tail(midwest,5)View(midwest)dim(midwest)str(midwest)summary(midwest)# Q2.poptotal(전체 인구)을 total로, popasian(아시아 인구)을 asian으로 변수명을 수정하세요.midwest &lt;- rename(midwest, total = poptotal, asian = popasian)head(midwest, 5)# Q3.total, asian 변수를 이용해 '전체 인구 대비 아시아 인구 백분율'파생변수를 만들고, 히스토그램을 만들어 도시들이 어떻게 분포하는지 살펴보세요.midwest$percasian &lt;- (midwest$asian / midwest$total)*100head(midwest, 5)hist(midwest$percasian)# Q4.아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 \"large\", 그 외에는 \"small\"을 부여하는 파생변수를 만들어 보세요.mean(midwest$percasian)midwest$percasiantotal &lt;- ifelse(midwest$percasian &gt; mean(midwest$percasian), \"large\", \"small\")head(midwest, 10)# Q5.\"large\"와 \"small\"에 해당하는 지역이 얼마나 되는지, 진도표와 빈도막대그래프로 만들어서 확인해보세요.table(midwest$percasiantotal)qplot(midwest$percasiantotal) 정리하기1.데이터 준비, 패키지 준비123mpg &lt;- as.data.frame(ggplot2::mpg) # 데이터 불러오기library(dplyr) # dplyr 로드library(ggplot2) # ggplot2 로드 2.데이터 파악123456head(mpg) # Raw 데이터 앞부분tail(mpg) # Raw 데이터 뒷부분View(mpg) # Raw 데이터 뷰어창에서 확인dim(mpg) # 차원str(mpg) # 속성summary(mpg) # 요약 통계량 3.변수명 수정1mpg &lt;- rename(mpg, company = manufacturer) 4.파생변수 생성12mpg$total &lt;- (mpg$cty + mpg$hwy)/2 # 변수 조합mpg$test &lt;- ifelse(mpg$total &gt;= 20, \"pass\", \"fail\") # 조건문 활용 5.빈도 확인12table(mpg$test) # 빈도표 출력qplot(mpg$test) # 막대 그래프 활용","link":"/2020/07/15/R-2020-07-15-data/"},{"title":"R 언어 준비하기 (R 설치, RStudio 설치, R 스튜디오 설치)","text":"R 설치R 사이트 접속 R 다운로드 : 자신의 운영체제 선택 2020.07.14 기준 최신버전 ‘R-4.0.2.pkg’ 기본설치 진행 RStudio 설치RStudio 사이트 접속 RStudio 다운로드 : 자신의 운영체제 선택 설치 완료","link":"/2020/07/13/R-2020-07-13-Ready/"},{"title":"R 데이터 가공하기","text":"데이터 전처리원하는 형태로 데이터 가공하기 데이터 전처리(Preprocessing) - dplyr 패키지 함수 기능 filter() 행 추출 select() 열(변수) 추출 arrange() 정렬 mutate() 변수 추가 summarise() 통계치 산출 group_by() 집단별로 나누기 left_join() 데이터 합치기(열) bind_rows() 데이터 합치기(행) 조건에 맞는 데이터만 추출하기 (행)123456789101112131415161718library(dplyr)exam &lt;- read.csv(\"csv_exam.csv\")exam# [Ctrl+Shit+M]exam %&gt;% filter(class == 1)exam %&gt;% filter(class == 2)exam %&gt;% filter(class != 1)exam %&gt;% filter(class != 3)exam %&gt;% filter(math &gt; 50)exam %&gt;% filter(English &lt; 80)exam %&gt;% filter(class == 1 &amp; math &gt;= 50)exam %&gt;% filter(math &gt;= 90 | English &gt;=90)exam %&gt;% filter(class == 1 | class == 3| class == 5)exam %&gt;% filter(class %in% c(1,3,5)) 123456# 추출한 행으로 데이터 만들기class1 &lt;- exam %&gt;% filter(class == 1)class2 &lt;- exam %&gt;% filter(class == 2)mean(class1$math)mean(class2$math) R에서 사용하는 기호들 논리연산자 기능 &lt; 작다 &lt;= 작거나 같다 &gt; 크다 &gt;= 크거나 같다 == 같다 != 같지 않다 | 또는 &amp; 그리고 %in% 매칭 확인 산술 연산자 기능 + 더하기 - 빼기 * 곱하기 / 나누기 ^, ** 제곱 %/% 나눗셈의 몫 %% 나눗셈의 나머지 실습12345678910111213141516171819202122232425# Q1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. # displ(배기량)이 4 이하인 자동차와 5 이상인 자동차 중 # 어떤 자동차의 hwy(고속도로 연비)가 평균적으로 더 높은지 알아보세요.mpg &lt;- as.data.frame(ggplot2::mpg)mpgmpg_1 &lt;- mpg %&gt;% filter(displ &lt;= 4)mpg_2 &lt;- mpg %&gt;% filter(displ &gt; 5)mean(mpg_1$hwy)mean(mpg_2$hwy)# Q2. 자동차 제조 회사에 따라 도시 연비가 다른지 알아보려고 합니다. # \"audi\"와 \"toyota\" 중 어느 manufacturer(자동차 제조 회사)의 # cty(도시 연비)가 평균적으로 더 높은지 알아보세요.mpg_audi &lt;- mpg %&gt;% filter(manufacturer == \"audi\")mpg_toyota &lt;- mpg %&gt;% filter(manufacturer == \"toyota\")mean(mpg_audi$cty)mean(mpg_toyota$cty)mean((mpg %&gt;% filter(manufacturer == \"audi\"))$cty)# Q3. \"chevrolet\",\"ford\",\"honda\"자동타의 고속도로 연비 평균을 알아보려고 합니다. # 이 회사들의 자동차를 추출한 뒤 hwy 전체 평균을 구해보세요.mpg_3 &lt;- mpg %&gt;% filter(manufacturer %in% c(\"chevrolet\",\"ford\",\"honda\"))mean(mpg_3$hwy) 필요한 변수만 추출하기1234567891011121314exam %&gt;% select(math)exam %&gt;% select(math, english)exam %&gt;% select(-math)exam %&gt;% select(-math, -english)exam %&gt;% filter(class == 1) %&gt;% select(english)exam %&gt;% filter(class == 1) %&gt;% select(english)exam %&gt;% select(id, math) %&gt;% head(10) 실습1234567891011121314151617181920'Q1. mpg데이터는 11개 변수로 구성되어 있습니다. 이 중 일부만 추출해서 분석에 활용하려고 합니다. mpg 데이터에서 class(자동차 종류), cty(도시 연비) 변수를 추출해 새로운 데이터를 만드세요. 새로 만든 데이터의 일부를 출력해서 두 변수로만 구성되어 있는지 확인하세요.'mpg_sub &lt;- mpg %&gt;% select(class, cty)head(mpg_sub)dim(mpg_sub)'Q2. 자동차 종류에 따라 도시 연비가 다른지 알아보려고 합니다. 앞에서 추출한 데이터를 이용해서 class(자동차 종류)가 \"suv\"인 자동차와 \"compact\"인 자동차 중 어떤 자동차의 cty(도시 연비)가 더 높은지 알아보세요.'mpg_suv &lt;- mpg_sub %&gt;% filter(class == \"suv\")mpg_compact &lt;- mpg_sub %&gt;% filter(class == \"compact\")mean(mpg_suv$cty)mean(mpg_compact$cty) 순서대로 정렬하기1234exam %&gt;% arrange(math) # math 오름차순 정렬exam %&gt;% arrange(desc(math)) # descendexam %&gt;% arrange(class, math) 실습12345# \"audi\"에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다.# \"audi\"에서 생산한 자동차 중 hwy가 1 ~ 5위에 해당하는 자동차의 데이터를 출력하세요.mpg_audi %&gt;% arrange(desc(hwy)) %&gt;% head(5) 새로운 변수 추가하기1234567891011121314151617exam %&gt;% mutate(total = math + english + science) %&gt;% headexam %&gt;% mutate(total = math + english + science, mean = (math + english + science)/3) %&gt;% headexam %&gt;% mutate(test = ifelse(science &gt;= 60, \"pass\", \"fail\")) %&gt;% headexam %&gt;% mutate(total = math + english + science) %&gt;% arrange(total) %&gt;% head 실습123456789101112131415161718192021# Q1. mpg데이터 복사본을 만들고, cty와 hwy를 더한 '합산 연비 변수'를 추가하세요.mpg_new &lt;- as.data.frame(ggplot2::mpg)mpg_new &lt;- mpg_new %&gt;% mutate(total = cty + hwy)# Q2. 앞에서 만든 '합산 연비 변수'를 2 로 나눠 '평균 연비 변수'를 추가하세요.mpg_new &lt;- mpg_new %&gt;% mutate(mean = total/2)# Q3. '평균 연비 변수'가 가장 높은 자동차를 3 종의 데이터를 출력하세요.mpg_new %&gt;% arrange(desc(mean)) %&gt;% head(3)# Q4. 1~3번 문제를 해결할 수 있는 하나로 연결된 dplyr 구문을 만들어 출력하세요 # 데이터는 복사본 대신 mpg원본을 이용하세요.mpg %&gt;% mutate(total = cty+hwy, mean = total/2) %&gt;% arrange(desc(mean)) %&gt;% head(3) 집단별로 요약하기123456789101112exam %&gt;% summarise(mean_math = mean(math))exam %&gt;% group_by(class) %&gt;% summarise(mean_math = mean(math))exam %&gt;% group_by(class) %&gt;% summarise(mean_math = mean(math), sum_math = sum(math), median_math = median(math), n = n()) 자주 사용하는 요약통계량 함수 함수 의미 mean() 평균 sd() 표준편차 sum() 합계 median() 중앙값 min() 최솟값 max() 최댓값 n() 빈도 1234mpg %&gt;% group_by(manufacturer, drv) %&gt;% summarise(mean_cty = mean(cty)) %&gt;% head(10) dplyr 조합하기회사별로 “suv” 자동차의 도시 및 고속도로 통합 연비 평균을 구해 내림차순으로 정렬하고, 1~5위까지 출력하기 절차 기능 dplyr 함수 1 회사별로 분리 group_by() 2 suv 추출 filter() 3 통합 연비 변수 생성 mutate() 4 통합 연비 평균 산출 summarise() 5 내림차순 정렬 arrange() 6 1~5위까지 출력 head() 12345678910mpg &lt;- as.data.frame(ggplot2::mpg)mpgmpg %&gt;% group_by(manufacturer) %&gt;% filter(class == \"suv\") %&gt;% mutate(total = cty+hwy) %&gt;% summarise(mean = mean(total)) %&gt;% arrange(desc(mean)) %&gt;% head() 실습12345678910111213141516171819202122232425262728# Q1. mpg 데이터의 class는 \"suv\",\"compact\"등 자동차를 특징에 따라 일곱 종류로 분류한 변수입니다. # 어떤 차종의 연비가 높은지 비교해보려고 합니다. class별 cty평균을 구해보세요.mpg %&gt;% group_by(class) %&gt;% summarise(mean_cty = mean(cty))# Q2. 앞 문제의 출력 결과는 class값 알파벳 순으로 정렬되어 있습니다. # 어떤 차종의 도시 연비가 높은지 쉽게 알아볼 수 있도록 cty평균이 높은 순으로 정렬해 출력하세요.mpg %&gt;% group_by(class) %&gt;% summarise(mean_cty = mean(cty)) %&gt;% arrange(desc(mean_cty))# Q3. 어떤 회사 자동차의 hwy(고속도로 연비)가 가장 높은지 알아보려고 합니다. # hwy 평균이 가장 높은 회사 세 곳을 출력하세요.mpg %&gt;% group_by(manufacturer) %&gt;% summarise(mean_hwy = mean(hwy)) %&gt;% arrange(desc(mean_hwy)) %&gt;% head(3)# Q4. 어떤 회사에서 \"compact\"(경차) 차종을 가장 많이 생산하는지 알아보려고 위해 # 각 회사별 \"compact\" 차종 수를 내림차순으로 정렬해 출력하세요.mpg %&gt;% filter(class == \"compact\") %&gt;% group_by(manufacturer) %&gt;% summarise(n = n()) %&gt;% arrange(desc(n)) 데이터 합치기가로로 합치기123456789101112131415test1 &lt;- data.frame(id = c(1, 2, 3, 4, 5), midterm = c(60, 80, 70, 90, 85))test2 &lt;- data.frame(id = c(1, 2, 3, 4, 5), final = c(70, 83, 65, 95, 80))total &lt;- left_join(test1, test2, by = \"id\")totalname &lt;- data.frame(class = c(1, 2, 3, 4, 5), teacher = c(\"kim\", \"lee\", \"park\", \"choi\", \"jung\"))nameexam_new &lt;- left_join(exam, name, by = \"class\")exam_new 세로로 합치기1234567group_a &lt;- data.frame(id = c(1, 2, 3, 4, 5), test = c(60, 80, 70, 90, 85))group_b &lt;- data.frame(id = c(6, 7, 8, 9, 10), test = c(70, 83, 65, 95, 80))group_all &lt;- bind_rows(group_a, group_b)group_all 실습 mpg 데이터의 fl변수는 자동차에 사용하는 연료(fuel)를 의미합니다. 아래는 자동차 연료별 가격을 나타낸 표입니다. fl 연료 종류 가격(갤런당 USD) c CNG 2.35 d diesel 2.38 e ethanol E85 2.11 p premium 2.76 r regular 2.22 123456789101112131415fuel &lt;- data.frame(fl = c(\"c\", \"d\", \"e\", \"p\", \"r\"), price_fl = c(2.35, 2.38, 2.11, 2.76, 2.22), stringsAsFactors = F)fuel # Q1. mpg데이터에는 연료 종류를 나타낸 fl 변수는 있지만 연료 가격을 나타낸 변수는 없습니다.# 위에서 만든 fuel 데이터를 이용해서 mpg데이터에 price_fl(연료 가격) 변수를 추가하세요.mpg &lt;- left_join(mpg, fuel, by=\"fl\")mpg# Q2. 연료 가격 변수가 잘 추가됐는지 확인하기 위해서 # model, fl, price_fl 변수를 추출해 앞부분 5 행을 출력해 보세요.mpg %&gt;% select(model, fl, price_fl) %&gt;% head(5) 정리하기1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556# 1.조건에 맞는 데이터만 추출하기exam %&gt;% filter(english &gt;= 80)# 여러 조건 동시 충족exam %&gt;% filter(class == 1 &amp; math &gt;= 50)# 여러 조건 중 하나 이상 충족exam %&gt;% filter(math &gt;= 90 | english &gt;= 90)exam %&gt;% filter(class %in% c(1,3,5))# 2.필요한 변수만 추출하기exam %&gt;% select(math)exam %&gt;% select(class, math, english)# 3.함수 조합하기, 일부만 출력하기exam %&gt;% select(id, math) %&gt;% head(10)# 4.순서대로 정렬하기exam %&gt;% arrange(math)exam %&gt;% arrange(desc(math))exam %&gt;% arrange(class, math)# 5.파생변수 추가하기exam %&gt;% mutate(total = math, english, science)# 여러 파생변수 한 번에 추가하기exam %&gt;% mutate(total = math + english + science, mean = total/3)# mutate()에 ifelse() 적용하기exam %&gt;% mutate(test = ifelse(science &gt;= 60, \"pass\", \"fail\"))# 추가한 변수를 dplyr 코드에 바로 활용하기exam %&gt;% mutate(total = math + english + science) %&gt;% arrange(total)# 6.집단별로 요약하기exam %&gt;% group_by(class) %&gt;% summarise(mean_math = mean(math))# 각 집단별로 다시 집단 나누기mpg %&gt;% group_by(manufacturer, drv) %&gt;% summarise(mean_cty = mean(cty))# 7.데이터 합치기# 가로로 합치기total &lt;- left_join(test1, test2, by = \"id\")# 세로로 합치기group_all &lt;- bind_rows(group_a, group_b) 실습미국 동북중부 437개 지역의 인구통계 정보를 담고 있는 midwest 데이터를 사용해 데이터 분석 문제를 해결해 보세요. midwest는 ggplot2패키지에 들어 있습니다.12345678910111213141516171819202122232425262728293031323334353637383940# 문제1. popadults는 해당 지역의 성인 인구, poptotal은 전체 인구를 나타냅니다. # midwest데이터에 '전체 인구 대비 미성년 인구 백분율' 변수를 추가하세요.midwest &lt;- as.data.frame(ggplot2::midwest)midwestmidwest %&gt;% select(popadults, poptotal)midwest &lt;- midwest %&gt;% mutate(percchild = ((poptotal-popadults)/poptotal)*100)# 문제2. 미성년 인구 백분율이 가장 높은 상위 5개 county(지역)의 미성년 인구 백분율을 출력하세요.midwest %&gt;% select(county, percchild) %&gt;% arrange(desc(percchild)) %&gt;% head(5)\" 문제3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요. | 분류 | 기준 | | large | 40% 이상 | | middle | 30% ~ 40% 미만 | | small | 30% 미만 |\"midwest &lt;- midwest %&gt;% mutate(gradechild = ifelse(percchild &gt;= 40, \"large\", ifelse(percchild &gt;=30, \"middle\", \"small\")))table(midwest$gradechild)# 문제4. popasian은 해당 지역의 아시아인 인구를 나타냅니다. # '전체 인구 대비 아시아인 백분율' 변수를 만들고 # state, county, 아시아인 백분율을 출력하세요.midwest &lt;- midwest %&gt;% mutate(percasian = (popasian/poptotal)*100) %&gt;% select(state, county, percasian) midwest","link":"/2020/07/17/R-2020-07-17-data/"}],"tags":[{"name":"R","slug":"R","link":"/tags/R/"},{"name":"R programming","slug":"R-programming","link":"/tags/R-programming/"},{"name":"R데이터","slug":"R데이터","link":"/tags/R%EB%8D%B0%EC%9D%B4%ED%84%B0/"},{"name":"r","slug":"r","link":"/tags/r/"},{"name":"RStudio","slug":"RStudio","link":"/tags/RStudio/"},{"name":"R 설치","slug":"R-설치","link":"/tags/R-%EC%84%A4%EC%B9%98/"},{"name":"R스튜디오 설치","slug":"R스튜디오-설치","link":"/tags/R%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4-%EC%84%A4%EC%B9%98/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"adsense","slug":"adsense","link":"/tags/adsense/"},{"name":"hexo adsense","slug":"hexo-adsense","link":"/tags/hexo-adsense/"},{"name":"github블로그","slug":"github블로그","link":"/tags/github%EB%B8%94%EB%A1%9C%EA%B7%B8/"},{"name":"헥소","slug":"헥소","link":"/tags/%ED%97%A5%EC%86%8C/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"헥소 블로그","slug":"헥소-블로그","link":"/tags/%ED%97%A5%EC%86%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8/"},{"name":"IT잡담","slug":"IT잡담","link":"/tags/IT%EC%9E%A1%EB%8B%B4/"},{"name":"주저리주저리","slug":"주저리주저리","link":"/tags/%EC%A3%BC%EC%A0%80%EB%A6%AC%EC%A3%BC%EC%A0%80%EB%A6%AC/"},{"name":"hexo블로그","slug":"hexo블로그","link":"/tags/hexo%EB%B8%94%EB%A1%9C%EA%B7%B8/"},{"name":"hexo image","slug":"hexo-image","link":"/tags/hexo-image/"},{"name":"R언어","slug":"R언어","link":"/tags/R%EC%96%B8%EC%96%B4/"},{"name":"R스튜디오","slug":"R스튜디오","link":"/tags/R%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4/"}],"categories":[{"name":"R","slug":"R","link":"/categories/R/"},{"name":"hexo","slug":"hexo","link":"/categories/hexo/"},{"name":"잡담","slug":"잡담","link":"/categories/%EC%9E%A1%EB%8B%B4/"}]}