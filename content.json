{"pages":[{"title":"포트폴리오","text":"","link":"/about/index.html"}],"posts":[{"title":"R 데이터 프레임","text":"데이터 프레임 이해하기 이름 영어 점수 수학 점수 김지훈 90 50 이유진 80 60 박동현 60 100 김민지 70 20 ‘열’ 속성 / ‘행’ 한 사람의 정보 123456789101112131415161718192021222324252627english &lt;- c(90, 80, 60, 70)english## [1] 90 80 60 70math &lt;- c(50, 60, 100, 20)math## [1] 50 60 100 20class &lt;- c(1, 1, 2, 2)class## [1] 1 1 2 2df_midterm &lt;- data.frame(english, math, class)df_midterm## english math class## 1 90 50 1## 2 80 60 1## 3 60 100 2## 4 70 20 2mean(df_midterm$english)mean(df_midterm$math)df_midterm &lt;- data.frame(english = c(90, 80, 60, 70), math = c(50, 60, 100, 20), class = c(1, 1, 2, 2))df_midterm 외부 데이터 가져오기1234567891011121314151617181920install.packages(\"readxl\")library(readxl)getwd() # 웨킹 디렉토리 확인df_exam &lt;- read_excel(\"excel_exam.xlsx\")df_exammean(df_exam$english)mean(df_exam$science)df_exam_novar &lt;- read_excel(\"excel_exam_novar.xlsx\", col_names = F)df_exam_novardf_exam_sheet &lt;- read_excel(\"excel_exam_sheet.xlsx\", sheet = 3)df_exam_sheetdf_csv_exam &lt;- read.csv(\"csv_exam.csv\")df_csv_exam &lt;- read.csv(\"csv_exam.csv\", stringsAsFactors = F)df_csv_exam 데이터 내보내기123456df_midterm &lt;- data.frame(english = c(90, 80, 60, 70), math = c(50, 60, 100, 20), class = c(1, 1, 2, 2))df_midtermwrite.csv(df_midterm, file = \"df_midterm.csv\") RData파일 활용하기 R 전용 데이터 파일 용량 작고 빠름 1234567891011121314151617181920212223242526save(df_midterm, file = \"df_midterm.rda\")rm(df_midterm)df_midterm## 에러: 객체 'df_midterm'를 찾을 수 없습니다load(\"df_midterm.rda\")df_midterm## english math class## 1 90 50 1## 2 80 60 1## 3 60 100 2## 4 70 20 2'변수에 할당'df_exam &lt;- read_excel(\"excel_exam.xlsx\")df_csv_exam &lt;- read.csv(\"csv_exam.csv\")'Rda 파일 : 데이터 프레임 자동 생성'load(\"df_midterm.rda\")","link":"/2020/07/14/R-2020-07-14-Data-Frame/"},{"title":"R 데이터 정제","text":"빠진 데이터 처리결측치(Missing Value) 누락된 값, 비어있는 값 함수 적용 불가, 분석 결과 왜곡 제거 후 분석 실시 결측치 찾기결측치 만들기 결측치 표기 - 대문자 NA 123456789df &lt;- data.frame(sex = c(\"M\", \"F\", NA, \"M\", \"F\"), score = c(5, 4, 3, 4, NA))df## sex score## 1 M 5## 2 F 4## 3 &lt;NA&gt; 3## 4 M 4## 5 F NA 결측치 확인하기1234567891011is.na(df)## sex score## [1,] FALSE FALSE## [2,] FALSE FALSE## [3,] TRUE FALSE## [4,] FALSE FALSE## [5,] FALSE TRUEtable(is.na(df))## FALSE TRUE ## 8 2 변수별로 결측치 확인하기1234567table(is.na(df$sex))## FALSE TRUE ## 4 1 table(is.na(df$score))## FALSE TRUE ## 4 1 결측치 포함된 상태로 분석12345mean(df$score)## [1] NAsum(df$score)## [1] NA 결측치 제거하기 결측치가 있는 행 제거 결측치에 값 대입하기 평균값 최빈값 : 가장 많이 등장한 값 다른값 적용 : 머신러닝 / 딥러닝 결측치 있는 행 제거하기12345678910df %&gt;% filter(is.na(score))## sex score## 1 F NAdf %&gt;% filter(!is.na(score))## sex score## 1 M 5## 2 F 4## 3 &lt;NA&gt; 3## 4 M 4 결측치 제외한 데이터로 분석하기123456df_nomiss &lt;- df %&gt;% filter(!is.na(score))mean(df_nomiss$score)## [1] 4sum(df_nomiss$score)## [1] 16 여러 변수 동시에 결측치 없는 데이터 추출하기123456df_nomiss &lt;- df %&gt;% filter(!is.na(score) &amp; !is.na(sex))df_nomiss## sex score## 1 M 5## 2 F 4## 3 M 4 결측치가 하나라도 있으면 제거하기 분석에 필요한 데이터까지 손실 될 가능성 유의 123456df_nomiss2 &lt;- na.omit(df)df_nomiss2## sex score## 1 M 5## 2 F 4## 4 M 4 함수의 결측치 제외 기능 이용하기 na.rm = T 12345mean(df$score, na.rm = T)## [1] 4sum(df$score, na.rm = T)## [1] 16 summarise()에서 na.rm = T 사용하기 123456789101112' 결측치 생성 'exam &lt;- read.csv(\"csv_exam.csv\")exam[c(3, 8, 15), \"math\"] &lt;- NA' 평균 구하기 'exam %&gt;% summarise(mean_math = mean(math))## mean_math## 1 NAexam %&gt;% summarise(mean_math = mean(math, na.rm = T))## mean_math## 1 55.23529 다른 함수들에 적용12345exam %&gt;% summarise(mean_math = mean(math, na.rm = T), sum_math = sum(math, na.rm = T), median_math = median(math, na.rm = T))## mean_math sum_math median_math## 1 55.23529 939 50 결측치 대체하기 결측치가 많을 경우 모두 제외하면 데이터 손실이 큼 대안: 다른 값 채워넣기 결측치 대체법(Imputation) 대표값(평균, 최빈값 등)으로 일괄 대체 통계분석 기법 적용, 예측값 추정해서 대체 평균값으로 결측치 대체하기123456789' 평균 구하기 'mean(exam$math, na.rm = T)## [1] 55.23529' 평균으로 대체하기 'exam$math &lt;- ifelse(is.na(exam$math), 55, exam$math)table(is.na(exam$math))## FALSE ## 20 실습123456789101112131415161718192021' mpg 데이터 결측치 만들기 'mpg &lt;- as.data.frame(ggplot2::mpg)mpg[c(65, 124, 131, 153, 212), \"hwy\"] &lt;- NA'Q1. drv(구동방식)별로 hwy(고속도로 연비) 평균이 어떻게 다른지 알아보려고 합니다. 분석을 하기 전에 우선 두 변수에 결측치가 있는지 확인해야 합니다. dvr 변수와 hwy 변수에 결측치가 몇 개 있는지 알아보세요.'table(is.na(mpg$drv))table(is.na(mpg$hwy))'Q2. filter()를 이용해 hwy 변수의 결측치를 제외하고, 어떤 구동방식의 hwy 평균이 높은지 알아보세요. 하나의 dplyr 구문으로 만들어야 합니다.'mpg %&gt;% filter(!is.na(hwy)) %&gt;% group_by(drv) %&gt;% summarise(mean_hwy = mean(hwy)) 이상한 값을 가진 데이터 처리이상치 제거하기 정상범위의 기준을 정해서 벗어나면 결측 처리 논리적 판단 : 성인 몸무게 50kg ~ 150kg 벗어나면 극단치 통계적 판단 : 상하위 0.3% 극단치 또는 상자그림 1.5IQR 벗어나면 극단치 1234567891011121314151617181920outlier &lt;- data.frame(sex = c(1,2,1,3,2,1), score = c(5,4,3,4,2,6))outlier' 이상치 확인하기 'table(outlier$sex)table(outlier$score)' 결측 처리하기 'outlier$sex &lt;- ifelse(outlier$sex == 3, NA, outlier$sex)outlier$score &lt;- ifelse(outlier$score &gt; 5, NA, outlier$score)outlierinstall.packages(\"dplyr\")library(dplyr)outlier %&gt;% filter(!is.na(sex) &amp; !is.na(score)) %&gt;% group_by(sex) %&gt;% summarise(mean_score = mean(score)) 상자 그림으로 극단치 기준 정하기12345678910111213141516install.packages(\"ggplot2\")library(ggplot2)mpg &lt;- as.data.frame(ggplot2::mpg)boxplot(mpg$hwy)' 상자 그림 통계치 출력 'boxplot(mpg$hwy)$stats' 결측 처리하기 'mpg$hwy &lt;- ifelse(mpg$hwy &lt; 12 | mpg$hwy &gt; 37, NA, mpg$hwy)table(is.na(mpg$hwy))mpg %&gt;% group_by(drv) %&gt;% summarise(mean_hwy = mean(hwy, na.rm = T)) 실습12345678910111213141516171819202122232425262728293031mpg &lt;- as.data.frame(ggplot2::mpg)mpg[c(10, 14, 58, 93), \"drv\"] &lt;- \"k\"mpg[c(29, 43, 129, 203), \"cty\"] &lt;- c(3, 4, 39, 42)'Q1. drv에 이상치가 있는지 확인하세요. 이상치를 결측 처리한 후 이상치가 사라졌는지 확인하세요. 결측 처리를 할 때는 %in% 기호를 활용하세요.'mpg$drv &lt;- ifelse(mpg$drv %in% c(\"4\",\"f\",\"r\"), mpg$drv, NA)table(mpg$drv)'Q2. 상자 그림을 이용해 cty에 이상치가 있는지 확인하세요. 상자 그림의 통계치를 이용해 정상 범위를 벗어난 값을 결측 처리한 후 다시 상자 그림을 만들어 이상치가 사라졌는지 확인하세요.'boxplot(mpg$cty)$statsmpg$cty &lt;- ifelse(mpg$cty &lt; 9 | mpg$cty &gt; 26, NA, mpg$cty)table(is.na(mpg$cty))boxplot(mpg$cty)'Q3. 두 변수의 이상치를 결측 처리 했으니 이제 분석할 차례입니다. 이상치를 제외한 다음 drv별로 cty 평균이 어떻게 다른지 알아보세요. 하나의 dplyr 구문으로 만들어야 합니다.'mpg %&gt;% filter(!is.na(drv) &amp; !is.na(cty)) %&gt;% group_by(drv) %&gt;% summarise(mean_cty = mean(cty)) 정리 1234567891011121314151617181920212223242526' 1.결측치 정제하기 '' 결측치 확인 'table(is.na(df$score))' 결측치 제거 'df_nomiss &lt;- df %&gt;% filter(!is.na(score))' 여러 변수 동시에 결측치 제거 'df_nomiss &lt;- df %&gt;% filter(!is.na(score) &amp; !is.na(sex))' 함수의 결측치 제외 기능 이용하기 'mean(df$score, na.rm = T)exam %&gt;% summarise(mean_math = mean(math, na.rm = T))' 2.이상치 제거하기 '' 이상치 확인 'table(outlier$sex)' 결측 처리 'outlier$sex &lt;- ifelse(outlier$sex == 3, NA, outlier$sex)' boxplot으로 극단치 기준 찾기 'boxplot(mpg$hwy)$stats' 극단치 결측 처리 'mpg$hwy &lt;- ifelse(mpg$hwy &lt; 12 | mpg$hwy &gt; 37, NA, mpg$hwy)","link":"/2020/07/21/R-2020-07-21-CHAPTER07/"},{"title":"R 시작하기","text":"통계와 그래픽을 위한 소프트웨어 무료 변수 (Variable) 변하는 수 소득 성별 학점 국적 1,000만 원 남자 3.8 대한민국 2,000만 원 남자 4.2 대한민국 3,000만 원 여자 2.6 대한민국 4,000만 원 여자 4.5 대한민국 소득, 성별 : 독립 변수 ( Independent Variable ) 학점 : 종속 변수 ( Dependent Variable ) 국적 : 상수 ( Constant ) 변수 생성1234567891011a &lt;- 1a## [1] 1b &lt;- 2b## [1] 2c &lt;- 3.5c## [1] 3.5 String1234567891011str1 &lt;- \"a\"str1## [1] \"a\"str2 &lt;- \"text\"str2## [1] \"text\"str3 &lt;- \"Hello World!\"str3## [1] \"Hello World!\" 변수 연산1234567891011a+b## [1] 34/b## [1] 25*b## [1] 10str1+2## Error in str1 + 2: non-numeric argumant to binary operator Vector c() : combine 1234567var1 &lt;- c(1, 2, 5, 7, 8)var1## [1] 1 2 5 7 8var2 &lt;- c(1:5) // 1~5까지 1씩 증가var2## [1] 1 2 3 4 5 1234567str4 &lt;- c(\"a\", \"b\", \"c\")str4## [1] \"a\" \"b\" \"c\"str5 &lt;- c(\"Hello!\", \"World\", \"is\", \"good!\")str5## [1] \"Hello!\" \"World\" \"is\" \"good!\" seq() : sequence 1234567var3 &lt;- seq(1,5) // 1~5까지 1씩 증가var3## [1] 1 2 3 4 5var4 &lt;- seq(1, 10, by = 3) // 1~10까지 3씩 증가var4## [1] 1 4 7 10 Vector 연산12345var1+2## [1] 3 4 7 9 10var1+var2##[1] 2 4 8 11 13 함수 값을 넣으면 특정한 기능을 수행해 처음과 다른 값이 출력됨 12345678910111213141516171819202122232425262728293031x &lt;- c(1, 2, 3)x## [1] 1 2 3# 함수 적용하기mean(x)## [1] 2max(x)## [1] 3min(x)## [1] 1str5## [1] \"Hello!\" \"World\" \"is\" \"good!\"paste(str5, callapse = \",\")## [1] \"Hello!,World,is,good!\"paste(str5, collapse = \" \")## [1] \"Hello! World is good!\"x_mean &lt;- mean(x)x_mean## [1] 2str5_paste &lt;- paste(str5, collapse = \" \")str5_paste## [1] \"Hello! World is good!\" 함수 꾸러미 ‘패키지(packages)’패키지 설치하기 &gt; 패키지 로드하기 &gt; 함수 사용하기 ggplot2 패키지 설치하기, 로드하기12345678910111213141516install.packages(\"ggplot2\") // ggplot2 패키지 설치library(ggplot2) // ggplot2 패키지 로드x &lt;- c(\"a\", \"a\", \"b\", \"c\")xqplot(x) # ggplot2패키지 함수qplot(data = mpg, x = hwy) # ggplot2 제공 데이터qplot(data = mpg, x = cty)qplot(data = mpg, x = drv, y = hwy) # x축, y축 지정qplot(data = mpg, x = drv, y = hwy, geom = \"line\") # 그래프 형태 지정qplot(data = mpg, x = drv, y = hwy, geom = \"boxplot\")qplot(data = mpg, x = drv, y = hwy, geom = \"boxplot\", colour = drv)?qplot","link":"/2020/07/13/R-2020-07-13-Rstart/"},{"title":"Git을 써라 제발!","text":"글을 쓰게된 이유우선 내 소개를 잠깐 해보자면 정보통신공학과를 전공했다. 졸업 후에는 1년 간 초등학생들에게 코딩을 가르쳤고 (리얼코딩, 스크래치), 현재는 대학원준비를 하면서 개발자, IT강사를 꿈꾸고 있다. 졸업 후 1년 6개월 가량 개발에 손을 떼었다가 공부를 처음부터 다시 시작해야 하는 상황이 되었다. 대학원 준비, 재취업 준비를 하면서 내가 1학년때 이걸 깨달았으면 얼마나 좋았을까 하는 것들이 있어 공유하고자 이 글을 작성하게 되었다. Git을 써라, 쓰세요, 제발 써주세요정확히 말하자면 Git과 클라우드 서비스를 많이 사용하라는 취지의 글이 될것 같은데,주변에 코딩을 시작하는 신입생이 있다면 달려가서 멱살을 잡고 흔들면서 당장 GitHub에 가입하라고 해주자. 타임머신이 있다면 1학년때로 돌아가서 나를 가둬놓고 5일간 굶기면서 클라우드 서비스를 쓰라고 세뇌 시킬거다. 대학교 4년간 수업과 연구실에서 세미나를 진행하면서 참 많은 공부를 했다 수업 C언어 객체지향프로그래밍 자료구조 Java Android 알고리즘 웹프로그래밍 데이터베이스 세미나 Front-end [HTML,css,JS,jQuery] Back-end [Node.js] Database [MySQL, PostgreSQL] ProgrammingLanguage [C, Java, Python, DesignPattern] Source manager [GitHub, SourceTree] Hardware [Arduino, RaspberryPi] Spring 운 좋게도 정말 좋은 연구실에 들어가서 다양한 분야를 경험해 볼 수 있었다. 물론 1회성 세미나도 있었고 내가 기억하지 못하는 세미나들도 많을거다. 물론 저것들을 다 할줄 아는것도 아니고 이것저것 많이 해봤다고 자랑하는 것도 아니다. 내가 말하고 싶은건 지금 나에게 남은게 하나도 없다는 점이다. 학부때는 강의실PC, 연구실PC, 노트북, 데스크탑을 옮겨가며 사용했고 쓸데없이 깔끔함이 이런데서 발휘되서 깨끗하게 지우고 다녔다. 연구실PC에 그나마 모아뒀던 자료들마저 연구실을 나오면서 다 날려버렸다. 정말 뼈저리게 후회한다 Git이 뭔데?‘Git’은 버전관리 시스템이다. 파일을 계속해서 주시하면서 모든 변화를 기록한다. Git에 올려뒀다면 코드를 작성하다가 언제든지 이전의 상태로 돌릴 수 있고, 여러명과 한 프로젝트를 작업하는데도 유용하게 쓰인다. ‘GitHub’는 클라우드에 있는 Git 제공자다. 내PC에 있는 Git 히스토리를 GitHub 웹사이트에 올려서 사용한다. GitHub를 통해서 다른사람이 내 코드를 가져갈 수도 있고 동시에 작업할 수도 있다. 물론 나도 다른사람의 코드를 확인하고 다운로드해서 활용할 수 있다. 뭐가 좋아요?파일의 버전관리, 협업을 잠시 치워두고 코딩을 막 시작한 사람의 관점에서 보자면 Git은 포트폴리오가 된다. 이게 가장 중요한 포인트다. ‘포트폴리오’가 된다! 내가 뭘배웠는지 하나하나 설명하지 않아도 GitHub를 보면 아 이사람이 이런 수업을 하고 이런 공부를 했구나를 보여줄수 있다. 따로 작성하지 않고 누구나 들어와서 볼 수있는 무료 포트폴리오가 되는 것이다. 실제로 GitHub를 보고 스카웃되는 경우도 있고, 많은 취업 이력서에 GitHub 주소를 적는 항목이 있다. GitHub에 얼마나 자료가 올라가는지 기록되는 잔디밭이 초록색으로 물들어가는 것을 보면서 뿌듯해 하자! 어떻게 쓰지 너무 어려워!사실 Git을 사용하는것이 쉽지는 않다. 처음 시작하면 add, push, clone, pull, branch … 다 무슨말인지 모르겠고 협업이라도 진행하려면 프로젝트 만들고 설정까지 하고 지쳐버린다. 하지만 쓰다보면 어떻게든 익숙해지고 그게 다 자산이 된다. 사용하기 쉽지 않은 만큼 많은 사람들이 질문하고 답변한다. 포기하지 말자! 사실 나도 아직 잘 모르겠다 Git… 친절하게 한글로 되어있는 사이트도 있다. 사실 코딩을 처음 시작하면 코딩하는 것보다 Git설정이 더 어렵고 오래걸린다. 정말 너무 힘들고 모르겠다면 GitHub에서 직접 파일을 업로드라도 해두자. 구글드라이브처럼 폴더를 만들고 파일들을 업로드 할 수 있다. 이런 방법으로라도 업로드 해두면 안하는 것보다 백배는 낫다! 프로그래밍 언어 강의 시간에 적은 ‘Hello World’부터 사소한 과제까지 내가 쓴 코드는 전부다!! 마치며Git뿐만 아니라 다양한 클라우드 서비스를 활용하자. 자료를 USB가 아닌 구글 드라이브나, 네이버 클라우드에 넣어두면 어디서든 언제든 PC,휴대폰만 있으면 확인이 가능하다. 얼마나 좋은가! usb는 공인인증서가 없어질때까지만 쓰자… 이 블로그도 클라우드 서비스를 이용하여 만들었다. 구름IDE에서 작성하고 GitHub에 배포하면 멋진 무료 블로그가 완성된다. 컴퓨터만 있으면 구름웹사이트에 접속해서 언제든지 글을 쓰고 블로그를 수정할 수 있다. 물론 보안상의 이유로 클라우드 서비스를 막아놓은 회사가 많지만 그럼에도 불구하고 우리는 많은 클라우드 서비스를 사용할 가치가 충분히 있다. 아무것도 설치하지 않아도 코딩을 할 수 있고, 어디서든 내 파일들을 조회할 수 있는 좋은 세상이다. 이런 주저리주저리 글로 Git을 사용해야 하는 이유가 잘 설명되었는지는 모르겠지만, 단 한 명이라도 읽고 뭔가 깨달았다면 성공이다. 지금 이 순간에도 무수히 많은 멋진 코드들이 클라우드 서비스에 올려지고 공유되고 있다. GitHub로 스카웃제의 오는 그날까지 화이팅!","link":"/2020/07/14/etc-2020-07-14-PleaseGit/"},{"title":"Hexo 시작하기","text":"준비하기 구름IDE 가입 github 가입 구름IDE 컨테이너 만들기 로그인 대시보드 -&gt; 새 컨테이너 생성 소프트웨어 스택 ‘Node.js’ 선택 hexo 설치123456$ npm install -g npm // npm 버전 업그레이드$ npm install hexo-cli -g$ hexo init hexoblog$ cd hexoblog$ npm install hexo 테마 다운로드12$ cd themes$ git clone [원하는 테마의 github 링크] hexo 테마 적용 _config.yml 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: [clone한 폴더명] 글 작성하기1$ hexo new post 'title' 구름IDE에서 호스팅하기1$ hexo server -p 3000 Github repository 생성‘[github_id].github.io’ 로 새로운 repository를 생성합니다 Github 연동 _config.yml123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: [생성한 git repository 주소 (.io까지)] branch: master Github 배포123456$ git config --global user.name [내 이름]$ git config --global user.email [github 계정]$ hexo clean$ hexo generate$ hexo deploy 참고 : 유튜브","link":"/2020/07/13/hexo-2020-07-13-HexoStart/"},{"title":"Hexo 블로그에 Google AdSense 적용하기","text":"사용하고 있는 테마 폴더의 ‘_config.yml’ 파일에서 애드센스 계정 설정을 해주면 된다 123456789# Google AdSense unit configurations- # Where should the widget be placed, left sidebar or right sidebar position: left type: adsense # AdSense client ID client_id: 'pub-1234567890123456' # AdSense AD unit ID slot_id: '1234567890' AdSense client_id, slot_id 웹게시자 ID : client_id 고객 ID : slot_id","link":"/2020/07/14/hexo-2020-07-14-Google-AdSense/"},{"title":"hexo 게시물 이미지 삽입","text":"먼저 다음과 같이 일반적인 방법으로 마크다운에 이미지를 넣고 실행하면 절대경로로 이미지가 로드되지만 게시물에 접근하는 경로에 따라 링크가 바뀌면서 사진이 뜨지 않는 경우가 생긴다. 1!(이미지 설명)[이미지 링크] ‘_config.yml’ 설정 변경1post_asset_folder: true post_asset_folder를 true로 변경하면 ‘hexo new (layout) [title]’명령어를 실행할 때마다 title과 동일한 이름의 폴더가 생성된다. 생성된 폴더에 이미지를 넣고 마크다운 문서에서 로드해주면 된다. 1{% asset_img image001.JPG %} 이미지를 매번 넣는 경우가 아니라면 설정을 false로 두고 필요할때만 title과 동일한 이름으로 폴더를 생성하여 사용하는 방법도 있다.","link":"/2020/07/14/hexo-2020-07-14-image/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/07/13/hexo-hello-world/"},{"title":"R 데이터 분석 기초","text":"데이터 파악하기 head() : 데이터 앞부분 출력 tail() : 데이터 뒷부분 출력 View() : 뷰어 창에서 데이터 확인 dim() : 데이터 차원 출력 (Dimension) str() : 데이터 속성 출력 (Structure) summary() : 요약통계량 출력 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566exam &lt;- read.csv(\"csv_exam.csv\")head(exam)## id class math english science## 1 1 1 50 98 50## 2 2 1 60 97 60## 3 3 1 45 86 78## 4 4 1 30 98 58## 5 5 2 25 80 65## 6 6 2 50 89 98head(exam, 10)## id class math english science## 1 1 1 50 98 50## 2 2 1 60 97 60## 3 3 1 45 86 78## 4 4 1 30 98 58## 5 5 2 25 80 65## 6 6 2 50 89 98## 7 7 2 80 90 45## 8 8 2 90 78 25## 9 9 3 20 98 15## 10 10 3 50 98 45tail(exam)## id class math english science## 15 15 4 75 56 78## 16 16 4 58 98 65## 17 17 5 65 68 98## 18 18 5 80 78 90## 19 19 5 89 68 87## 20 20 5 78 83 58tail(exam, 10)## id class math english science## 11 11 3 65 65 65## 12 12 3 45 85 32## 13 13 4 46 98 65## 14 14 4 48 87 12## 15 15 4 75 56 78## 16 16 4 58 98 65## 17 17 5 65 68 98## 18 18 5 80 78 90## 19 19 5 89 68 87## 20 20 5 78 83 58View(exam)dim(exam)## [1] 20 5str(exam)## 'data.frame': 20 obs. of 5 variables:## $ id : int 1 2 3 4 5 6 7 8 9 10 ...## $ class : int 1 1 1 1 2 2 2 2 3 3 ...## $ math : int 50 60 45 30 25 50 80 90 20 50 ...## $ english: int 98 97 86 98 80 89 90 78 98 98 ...## $ science: int 50 60 78 58 65 98 45 25 15 45 ...summary(exam)## id class math english science ## Min. : 1.00 Min. :1 Min. :20.00 Min. :56.0 Min. :12.00 ## 1st Qu.: 5.75 1st Qu.:2 1st Qu.:45.75 1st Qu.:78.0 1st Qu.:45.00 ## Median :10.50 Median :3 Median :54.00 Median :86.5 Median :62.50 ## Mean :10.50 Mean :3 Mean :57.45 Mean :84.9 Mean :59.45 ## 3rd Qu.:15.25 3rd Qu.:4 3rd Qu.:75.75 3rd Qu.:98.0 3rd Qu.:78.00 ## Max. :20.00 Max. :5 Max. :90.00 Max. :98.0 Max. :98.00 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960mpg &lt;- as.data.frame(ggplot2::mpg)head(mpg)## manufacturer model displ year cyl trans drv cty hwy fl class## 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compact## 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compact## 3 audi a4 2.0 2008 4 manual(m6) f 20 31 p compact## 4 audi a4 2.0 2008 4 auto(av) f 21 30 p compact## 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p compact## 6 audi a4 2.8 1999 6 manual(m5) f 18 26 p compacttail(mpg)## manufacturer model displ year cyl trans drv cty hwy fl class## 229 volkswagen passat 1.8 1999 4 auto(l5) f 18 29 p midsize## 230 volkswagen passat 2.0 2008 4 auto(s6) f 19 28 p midsize## 231 volkswagen passat 2.0 2008 4 manual(m6) f 21 29 p midsize## 232 volkswagen passat 2.8 1999 6 auto(l5) f 16 26 p midsize## 233 volkswagen passat 2.8 1999 6 manual(m5) f 18 26 p midsize## 234 volkswagen passat 3.6 2008 6 auto(s6) f 17 26 p midsizeView(mpg)dim(mpg)## [1] 234 11str(mpg)## 'data.frame': 234 obs. of 11 variables:## $ manufacturer: chr \"audi\" \"audi\" \"audi\" \"audi\" ...## $ model : chr \"a4\" \"a4\" \"a4\" \"a4\" ...## $ displ : num 1.8 1.8 2 2 2.8 2.8 3.1 1.8 1.8 2 ...## $ year : int 1999 1999 2008 2008 1999 1999 2008 1999 1999 2008 ...## $ cyl : int 4 4 4 4 6 6 6 4 4 4 ...## $ trans : chr \"auto(l5)\" \"manual(m5)\" \"manual(m6)\" \"auto(av)\" ...## $ drv : chr \"f\" \"f\" \"f\" \"f\" ...## $ cty : int 18 21 20 21 16 18 18 18 16 20 ...## $ hwy : int 29 29 31 30 26 26 27 26 25 28 ...## $ fl : chr \"p\" \"p\" \"p\" \"p\" ...## $ class : chr \"compact\" \"compact\" \"compact\" \"compact\" ...summary(mpg)## manufacturer model displ year ## Length:234 Length:234 Min. :1.600 Min. :1999 ## Class :character Class :character 1st Qu.:2.400 1st Qu.:1999 ## Mode :character Mode :character Median :3.300 Median :2004 ## Mean :3.472 Mean :2004 ## 3rd Qu.:4.600 3rd Qu.:2008 ## Max. :7.000 Max. :2008 ## cyl trans drv cty ## Min. :4.000 Length:234 Length:234 Min. : 9.00 ## 1st Qu.:4.000 Class :character Class :character 1st Qu.:14.00 ## Median :6.000 Mode :character Mode :character Median :17.00 ## Mean :5.889 Mean :16.86 ## 3rd Qu.:8.000 3rd Qu.:19.00 ## Max. :8.000 Max. :35.00 ## hwy fl class ## Min. :12.00 Length:234 Length:234 ## 1st Qu.:18.00 Class :character Class :character ## Median :24.00 Mode :character Mode :character ## Mean :23.44 ## 3rd Qu.:27.00 ## Max. :44.00 데이터 수정하기1234567891011121314151617181920212223242526install.packages(\"dplyr\")library(dplyr)?dplyrdf_raw &lt;- data.frame(var1 = c(1, 2, 1), var2 = c(2, 3, 3))df_raw## var1 var2## 1 1 2## 2 2 3## 3 1 3df_new &lt;- df_rawdf_new## var1 var2## 1 1 2## 2 2 3## 3 1 3df_new &lt;- rename(df_new, v2 = var2) # dplyr 함수, '새 변수명 = 기존 변수명'df_new## var1 v2## 1 1 2## 2 2 3## 3 1 3 실습123456789101112131415'''Q1. ggplot2 패키지의 mpg 데이터를 사용할 수 있도록 불러온 뒤 복사본을 만드세요.'''mpg &lt;- as.data.frame(ggplot2::mpg)mpg_new &lt;- mpg'''Q2. 복사본 데이터를 이용해서 cty는 city로, hwy는 highway로 변수명을 수정하세요.'''mpg_new &lt;- rename(mpg_new, city = cty, highway = hwy)'''Q3. 데이터 일부를 출력해서 변수명이 바뀌었는지 확인해 보세요.'''head(mpg_new) 데이터에 새로운 변수 만들기123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960df &lt;- data.frame(var1 = c(4, 3, 8), var2 = c(2, 6, 1))df## var1 var2## 1 4 2## 2 3 6## 3 8 1df$var_sum &lt;- df$var1 + df$var2df## var1 var2 var_sum## 1 4 2 6## 2 3 6 9## 3 8 1 9df$var_mean &lt;- (df$var1 + df$var2)/2df## var1 var2 var_sum var_mean## 1 4 2 6 3.0## 2 3 6 9 4.5## 3 8 1 9 4.5''' 각 차량의 연비의 평균 구하기 '''mpg$total &lt;- (mpg$cty + mpg$hwy) / 2''' 연비의 총 평균 구하기 '''mean(mpg$total)## [1] 20.14957summary(mpg$total)## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 10.50 15.50 20.50 20.15 23.50 39.50 hist(mpg$total)''' 연비에 따른 합겹 불합격 구분 '''mpg$test &lt;- ifelse(mpg$total &gt;= 20, \"pass\", \"fail\")head(mpg, 10)head(mpg$test,20)## [1] \"pass\" \"pass\" \"pass\" \"pass\" \"pass\" \"pass\" \"pass\" \"pass\" \"pass\" \"pass\" \"pass\"## [12] \"pass\" \"pass\" \"pass\" \"pass\" \"fail\" \"pass\" \"fail\" \"fail\" \"fail\"''' 합격, 불합격 갯수 '''qplot(mpg$test)table(mpg$test)## fail pass ## 106 128 mpg$grade &lt;- ifelse(mpg$total &gt;= 30, \"A\", ifelse(mpg$total &gt;= 20, \"B\", \"c\"))head(mpg, 20)table(mpg$grade)## A B c ## 10 118 106 qplot(mpg$grade)mpg$grade2 &lt;- ifelse(mpg$total &gt;= 30, \"A\", ifelse(mpg$total &gt;= 25, \"B\", ifelse(mpg$total &gt;= 20, \"C\", \"D\"))) 실습123456789101112131415161718192021222324252627282930313233'''ggplot2 패키지에는 미국 동북중부 437개 지역의 인구통계 정보를 담은 midwest라는 데이터가 포함되어 있습니다. midwest 데이터를 사용해 데이터 분석 문제를 해결해보세요.'''''' Q1.ggplot2의 midwest 데이터를 데이터 프레임 형태로 불러와서 데이터의 특성을 파악하세요. '''midwest &lt;- as.data.frame(ggplot2::midwest)midwesthead(midwest,5)tail(midwest,5)View(midwest)dim(midwest)str(midwest)summary(midwest)''' Q2.poptotal(전체 인구)을 total로, popasian(아시아 인구)을 asian으로 변수명을 수정하세요. '''midwest &lt;- rename(midwest, total = poptotal, asian = popasian)head(midwest, 5)''' Q3.total, asian 변수를 이용해 '전체 인구 대비 아시아 인구 백분율'파생변수를 만들고, 히스토그램을 만들어 도시들이 어떻게 분포하는지 살펴보세요. '''midwest$percasian &lt;- (midwest$asian / midwest$total)*100head(midwest, 5)hist(midwest$percasian)''' Q4.아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 \"large\", 그 외에는 \"small\"을 부여하는 파생변수를 만들어 보세요. '''mean(midwest$percasian)midwest$percasiantotal &lt;- ifelse(midwest$percasian &gt; mean(midwest$percasian), \"large\", \"small\")head(midwest, 10)''' Q5.\"large\"와 \"small\"에 해당하는 지역이 얼마나 되는지, 진도표와 빈도막대그래프로 만들어서 확인해보세요. '''table(midwest$percasiantotal)qplot(midwest$percasiantotal) 정리하기1.데이터 준비, 패키지 준비123mpg &lt;- as.data.frame(ggplot2::mpg) # 데이터 불러오기library(dplyr) # dplyr 로드library(ggplot2) # ggplot2 로드 2.데이터 파악123456head(mpg) # Raw 데이터 앞부분tail(mpg) # Raw 데이터 뒷부분View(mpg) # Raw 데이터 뷰어창에서 확인dim(mpg) # 차원str(mpg) # 속성summary(mpg) # 요약 통계량 3.변수명 수정1mpg &lt;- rename(mpg, company = manufacturer) 4.파생변수 생성12mpg$total &lt;- (mpg$cty + mpg$hwy)/2 # 변수 조합mpg$test &lt;- ifelse(mpg$total &gt;= 20, \"pass\", \"fail\") # 조건문 활용 5.빈도 확인12table(mpg$test) # 빈도표 출력qplot(mpg$test) # 막대 그래프 활용","link":"/2020/07/15/R-2020-07-15-data/"},{"title":"R 데이터 가공하기","text":"데이터 전처리원하는 형태로 데이터 가공하기 데이터 전처리(Preprocessing) - dplyr 패키지 함수 기능 filter() 행 추출 select() 열(변수) 추출 arrange() 정렬 mutate() 변수 추가 summarise() 통계치 산출 group_by() 집단별로 나누기 left_join() 데이터 합치기(열) bind_rows() 데이터 합치기(행) 조건에 맞는 데이터만 추출하기 (행)123456789101112131415161718library(dplyr)exam &lt;- read.csv(\"csv_exam.csv\")exam# [Ctrl+Shit+M]exam %&gt;% filter(class == 1)exam %&gt;% filter(class == 2)exam %&gt;% filter(class != 1)exam %&gt;% filter(class != 3)exam %&gt;% filter(math &gt; 50)exam %&gt;% filter(English &lt; 80)exam %&gt;% filter(class == 1 &amp; math &gt;= 50)exam %&gt;% filter(math &gt;= 90 | English &gt;=90)exam %&gt;% filter(class == 1 | class == 3| class == 5)exam %&gt;% filter(class %in% c(1,3,5)) 123456''' 추출한 행으로 데이터 만들기 '''class1 &lt;- exam %&gt;% filter(class == 1)class2 &lt;- exam %&gt;% filter(class == 2)mean(class1$math)mean(class2$math) R에서 사용하는 기호들 논리연산자 기능 &lt; 작다 &lt;= 작거나 같다 &gt; 크다 &gt;= 크거나 같다 == 같다 != 같지 않다 | 또는 &amp; 그리고 %in% 매칭 확인 산술 연산자 기능 + 더하기 - 빼기 * 곱하기 / 나누기 ^, ** 제곱 %/% 나눗셈의 몫 %% 나눗셈의 나머지 실습12345678910111213141516171819202122232425262728293031'''Q1. 자동차 배기량에 따라 고속도로 연비가 다른지 알아보려고 합니다. displ(배기량)이 4 이하인 자동차와 5 이상인 자동차 중 어떤 자동차의 hwy(고속도로 연비)가 평균적으로 더 높은지 알아보세요.'''mpg &lt;- as.data.frame(ggplot2::mpg)mpgmpg_1 &lt;- mpg %&gt;% filter(displ &lt;= 4)mpg_2 &lt;- mpg %&gt;% filter(displ &gt; 5)mean(mpg_1$hwy)mean(mpg_2$hwy)'''Q2. 자동차 제조 회사에 따라 도시 연비가 다른지 알아보려고 합니다. \"audi\"와 \"toyota\" 중 어느 manufacturer(자동차 제조 회사)의 cty(도시 연비)가 평균적으로 더 높은지 알아보세요.'''mpg_audi &lt;- mpg %&gt;% filter(manufacturer == \"audi\")mpg_toyota &lt;- mpg %&gt;% filter(manufacturer == \"toyota\")mean(mpg_audi$cty)mean(mpg_toyota$cty)mean((mpg %&gt;% filter(manufacturer == \"audi\"))$cty)'''Q3. \"chevrolet\",\"ford\",\"honda\"자동타의 고속도로 연비 평균을 알아보려고 합니다. 이 회사들의 자동차를 추출한 뒤 hwy 전체 평균을 구해보세요.'''mpg_3 &lt;- mpg %&gt;% filter(manufacturer %in% c(\"chevrolet\",\"ford\",\"honda\"))mean(mpg_3$hwy) 필요한 변수만 추출하기1234567891011121314exam %&gt;% select(math)exam %&gt;% select(math, english)exam %&gt;% select(-math)exam %&gt;% select(-math, -english)exam %&gt;% filter(class == 1) %&gt;% select(english)exam %&gt;% filter(class == 1) %&gt;% select(english)exam %&gt;% select(id, math) %&gt;% head(10) 실습1234567891011121314151617181920'''Q1. mpg데이터는 11개 변수로 구성되어 있습니다. 이 중 일부만 추출해서 분석에 활용하려고 합니다. mpg 데이터에서 class(자동차 종류), cty(도시 연비) 변수를 추출해 새로운 데이터를 만드세요. 새로 만든 데이터의 일부를 출력해서 두 변수로만 구성되어 있는지 확인하세요.'''mpg_sub &lt;- mpg %&gt;% select(class, cty)head(mpg_sub)dim(mpg_sub)'''Q2. 자동차 종류에 따라 도시 연비가 다른지 알아보려고 합니다. 앞에서 추출한 데이터를 이용해서 class(자동차 종류)가 \"suv\"인 자동차와 \"compact\"인 자동차 중 어떤 자동차의 cty(도시 연비)가 더 높은지 알아보세요.'''mpg_suv &lt;- mpg_sub %&gt;% filter(class == \"suv\")mpg_compact &lt;- mpg_sub %&gt;% filter(class == \"compact\")mean(mpg_suv$cty)mean(mpg_compact$cty) 순서대로 정렬하기1234exam %&gt;% arrange(math) # math 오름차순 정렬exam %&gt;% arrange(desc(math)) # descendexam %&gt;% arrange(class, math) 실습1234567'''\"audi\"에서 생산한 자동차 중에 어떤 자동차 모델의 hwy(고속도로 연비)가 높은지 알아보려고 합니다.\"audi\"에서 생산한 자동차 중 hwy가 1 ~ 5위에 해당하는 자동차의 데이터를 출력하세요.'''mpg_audi %&gt;% arrange(desc(hwy)) %&gt;% head(5) 새로운 변수 추가하기1234567891011121314151617exam %&gt;% mutate(total = math + english + science) %&gt;% headexam %&gt;% mutate(total = math + english + science, mean = (math + english + science)/3) %&gt;% headexam %&gt;% mutate(test = ifelse(science &gt;= 60, \"pass\", \"fail\")) %&gt;% headexam %&gt;% mutate(total = math + english + science) %&gt;% arrange(total) %&gt;% head 실습1234567891011121314151617181920212223''' Q1. mpg데이터 복사본을 만들고, cty와 hwy를 더한 '합산 연비 변수'를 추가하세요. '''mpg_new &lt;- as.data.frame(ggplot2::mpg)mpg_new &lt;- mpg_new %&gt;% mutate(total = cty + hwy)''' Q2. 앞에서 만든 '합산 연비 변수'를 2 로 나눠 '평균 연비 변수'를 추가하세요. '''mpg_new &lt;- mpg_new %&gt;% mutate(mean = total/2)''' Q3. '평균 연비 변수'가 가장 높은 자동차를 3 종의 데이터를 출력하세요. '''mpg_new %&gt;% arrange(desc(mean)) %&gt;% head(3)''' Q4. 1~3번 문제를 해결할 수 있는 하나로 연결된 dplyr 구문을 만들어 출력하세요 데이터는 복사본 대신 mpg원본을 이용하세요.'''mpg %&gt;% mutate(total = cty+hwy, mean = total/2) %&gt;% arrange(desc(mean)) %&gt;% head(3) 집단별로 요약하기123456789101112exam %&gt;% summarise(mean_math = mean(math))exam %&gt;% group_by(class) %&gt;% summarise(mean_math = mean(math))exam %&gt;% group_by(class) %&gt;% summarise(mean_math = mean(math), sum_math = sum(math), median_math = median(math), n = n()) 자주 사용하는 요약통계량 함수 함수 의미 mean() 평균 sd() 표준편차 sum() 합계 median() 중앙값 min() 최솟값 max() 최댓값 n() 빈도 1234mpg %&gt;% group_by(manufacturer, drv) %&gt;% summarise(mean_cty = mean(cty)) %&gt;% head(10) dplyr 조합하기회사별로 “suv” 자동차의 도시 및 고속도로 통합 연비 평균을 구해 내림차순으로 정렬하고, 1~5위까지 출력하기 절차 기능 dplyr 함수 1 회사별로 분리 group_by() 2 suv 추출 filter() 3 통합 연비 변수 생성 mutate() 4 통합 연비 평균 산출 summarise() 5 내림차순 정렬 arrange() 6 1~5위까지 출력 head() 12345678910mpg &lt;- as.data.frame(ggplot2::mpg)mpgmpg %&gt;% group_by(manufacturer) %&gt;% filter(class == \"suv\") %&gt;% mutate(total = cty+hwy) %&gt;% summarise(mean = mean(total)) %&gt;% arrange(desc(mean)) %&gt;% head() 실습123456789101112131415161718192021222324252627282930313233343536'''Q1. mpg 데이터의 class는 \"suv\",\"compact\"등 자동차를 특징에 따라 일곱 종류로 분류한 변수입니다. 어떤 차종의 연비가 높은지 비교해보려고 합니다. class별 cty평균을 구해보세요.'''mpg %&gt;% group_by(class) %&gt;% summarise(mean_cty = mean(cty))'''Q2. 앞 문제의 출력 결과는 class값 알파벳 순으로 정렬되어 있습니다. 어떤 차종의 도시 연비가 높은지 쉽게 알아볼 수 있도록 cty평균이 높은 순으로 정렬해 출력하세요.'''mpg %&gt;% group_by(class) %&gt;% summarise(mean_cty = mean(cty)) %&gt;% arrange(desc(mean_cty))'''Q3. 어떤 회사 자동차의 hwy(고속도로 연비)가 가장 높은지 알아보려고 합니다. hwy 평균이 가장 높은 회사 세 곳을 출력하세요.'''mpg %&gt;% group_by(manufacturer) %&gt;% summarise(mean_hwy = mean(hwy)) %&gt;% arrange(desc(mean_hwy)) %&gt;% head(3)'''Q4. 어떤 회사에서 \"compact\"(경차) 차종을 가장 많이 생산하는지 알아보려고 위해 각 회사별 \"compact\" 차종 수를 내림차순으로 정렬해 출력하세요.'''mpg %&gt;% filter(class == \"compact\") %&gt;% group_by(manufacturer) %&gt;% summarise(n = n()) %&gt;% arrange(desc(n)) 데이터 합치기가로로 합치기123456789101112131415test1 &lt;- data.frame(id = c(1, 2, 3, 4, 5), midterm = c(60, 80, 70, 90, 85))test2 &lt;- data.frame(id = c(1, 2, 3, 4, 5), final = c(70, 83, 65, 95, 80))total &lt;- left_join(test1, test2, by = \"id\")totalname &lt;- data.frame(class = c(1, 2, 3, 4, 5), teacher = c(\"kim\", \"lee\", \"park\", \"choi\", \"jung\"))nameexam_new &lt;- left_join(exam, name, by = \"class\")exam_new 세로로 합치기1234567group_a &lt;- data.frame(id = c(1, 2, 3, 4, 5), test = c(60, 80, 70, 90, 85))group_b &lt;- data.frame(id = c(6, 7, 8, 9, 10), test = c(70, 83, 65, 95, 80))group_all &lt;- bind_rows(group_a, group_b)group_all 실습 mpg 데이터의 fl변수는 자동차에 사용하는 연료(fuel)를 의미합니다. 아래는 자동차 연료별 가격을 나타낸 표입니다. fl 연료 종류 가격(갤런당 USD) c CNG 2.35 d diesel 2.38 e ethanol E85 2.11 p premium 2.76 r regular 2.22 12345678910111213141516171819fuel &lt;- data.frame(fl = c(\"c\", \"d\", \"e\", \"p\", \"r\"), price_fl = c(2.35, 2.38, 2.11, 2.76, 2.22), stringsAsFactors = F)fuel '''Q1. mpg데이터에는 연료 종류를 나타낸 fl 변수는 있지만 연료 가격을 나타낸 변수는 없습니다. 위에서 만든 fuel 데이터를 이용해서 mpg데이터에 price_fl(연료 가격) 변수를 추가하세요.'''mpg &lt;- left_join(mpg, fuel, by=\"fl\")mpg'''Q2. 연료 가격 변수가 잘 추가됐는지 확인하기 위해서 model, fl, price_fl 변수를 추출해 앞부분 5 행을 출력해 보세요.'''mpg %&gt;% select(model, fl, price_fl) %&gt;% head(5) 정리하기1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556''' 1.조건에 맞는 데이터만 추출하기 '''exam %&gt;% filter(english &gt;= 80)''' 여러 조건 동시 충족 '''exam %&gt;% filter(class == 1 &amp; math &gt;= 50)''' 여러 조건 중 하나 이상 충족 '''exam %&gt;% filter(math &gt;= 90 | english &gt;= 90)exam %&gt;% filter(class %in% c(1,3,5))''' 2.필요한 변수만 추출하기 '''exam %&gt;% select(math)exam %&gt;% select(class, math, english)''' 3.함수 조합하기, 일부만 출력하기 '''exam %&gt;% select(id, math) %&gt;% head(10)''' 4.순서대로 정렬하기 '''exam %&gt;% arrange(math)exam %&gt;% arrange(desc(math))exam %&gt;% arrange(class, math)''' 5.파생변수 추가하기 '''exam %&gt;% mutate(total = math, english, science)''' 여러 파생변수 한 번에 추가하기 '''exam %&gt;% mutate(total = math + english + science, mean = total/3)''' mutate()에 ifelse() 적용하기 '''exam %&gt;% mutate(test = ifelse(science &gt;= 60, \"pass\", \"fail\"))''' 추가한 변수를 dplyr 코드에 바로 활용하기 '''exam %&gt;% mutate(total = math + english + science) %&gt;% arrange(total)''' 6.집단별로 요약하기 '''exam %&gt;% group_by(class) %&gt;% summarise(mean_math = mean(math))''' 각 집단별로 다시 집단 나누기 '''mpg %&gt;% group_by(manufacturer, drv) %&gt;% summarise(mean_cty = mean(cty))''' 7.데이터 합치기 '''''' 가로로 합치기 '''total &lt;- left_join(test1, test2, by = \"id\")''' 세로로 합치기 '''group_all &lt;- bind_rows(group_a, group_b) 실습 미국 동북중부 437개 지역의 인구통계 정보를 담고 있는 midwest 데이터를 사용해 데이터 분석 문제를 해결해 보세요. midwest는 ggplot2패키지에 들어 있습니다. 1234567891011121314151617181920212223242526272829303132333435363738394041424344'''문제1. popadults는 해당 지역의 성인 인구, poptotal은 전체 인구를 나타냅니다. midwest데이터에 '전체 인구 대비 미성년 인구 백분율' 변수를 추가하세요.'''midwest &lt;- as.data.frame(ggplot2::midwest)midwestmidwest %&gt;% select(popadults, poptotal)midwest &lt;- midwest %&gt;% mutate(percchild = ((poptotal-popadults)/poptotal)*100)''' 문제2. 미성년 인구 백분율이 가장 높은 상위 5개 county(지역)의 미성년 인구 백분율을 출력하세요. '''midwest %&gt;% select(county, percchild) %&gt;% arrange(desc(percchild)) %&gt;% head(5)''' 문제3. 분류표의 기준에 따라 미성년 비율 등급 변수를 추가하고, 각 등급에 몇 개의 지역이 있는지 알아보세요. | 분류 | 기준 | | large | 40% 이상 | | middle | 30% ~ 40% 미만 | | small | 30% 미만 |'''midwest &lt;- midwest %&gt;% mutate(gradechild = ifelse(percchild &gt;= 40, \"large\", ifelse(percchild &gt;=30, \"middle\", \"small\")))table(midwest$gradechild)'''문제4. popasian은 해당 지역의 아시아인 인구를 나타냅니다. \"전체 인구 대비 아시아인 백분율\" 변수를 만들고 state, county, 아시아인 백분율을 출력하세요.'''midwest &lt;- midwest %&gt;% mutate(percasian = (popasian/poptotal)*100) %&gt;% select(state, county, percasian) midwest","link":"/2020/07/17/R-2020-07-17-data/"},{"title":"R 언어 준비하기 (R 설치, RStudio 설치, R 스튜디오 설치)","text":"R 설치R 사이트 접속 R 다운로드 : 자신의 운영체제 선택 2020.07.14 기준 최신버전 ‘R-4.0.2.pkg’ 기본설치 진행 RStudio 설치RStudio 사이트 접속 RStudio 다운로드 : 자신의 운영체제 선택 설치 완료","link":"/2020/07/13/R-2020-07-13-CHAPTER02/"},{"title":"Hello, R!","text":"R 이해하기R이란?‘데이터를 분석하는 데 사용되는 소프트웨어’ ‘뉴질랜드 오클랜드 대학교 통계학과 교수인 로스 이하카(Ross Ihaka), 로버트 젠틀맨(Robert Gentleman)’ 개발자가 아닌 수학자가 만들었다 R의 쓰임 통계분석 데이터에 특성을 살펴보는 기초 통계분석부터 가설검정에 사용되는 고급 통계 분석 기법까지 다양하게 활용 머신러닝 모델링 Machine Learning : 다량의 데이터를 이용해 특정 예측 모형을 만드는 기법 R에서는 랜덤 포레스트, SVM, 딥러닝 등 최신 머신러닝 알고리즘을 쉽게 활용 텍스트 마이닝 소셜 네트워크 분석 지도 시각화 주식 분석 이미지 분석 사운드 분석 웹 애플리케이션 개발 R 사용자 데이터 분석가 연구자 기업 데이터 분석 대회 참가자 캐글(www.kaggle.com) R이 강력한 이유오픈 소스 무료로 사용 가능 Free 오픈 소스 생태계 - 다양한 패키지, 최신 분석 기법 CRAN : R패키지 공유 사이트 다양한 교육 재료다양한 그래프 구현프로그래밍 방식 프로그래밍 방식 &lt;-&gt; GUI(Graphic User Interface) 방식 재현성 확보 오류 감소 공동 작업 가능 R과 파이썬 R Python 데이터 분석용으로 만들어진 언어 소프트웨어를 개발하는데 사용하는 언어 쉽고 간단한 문법으로 데이터 분석 가능 다른 프로그래밍 언어에 비해 데이터 분석 기능이 잘 구축되어 있음 (TensorFlow, 딥러닝 활용 라이브러리) 데이터 분석이 목적일때 권장 웹 서비스나 소프트웨어를 개발하는데 데이터 분석을 활용할때 권장","link":"/2020/07/12/R-2020-07-12-CHAPTER01/"},{"title":"그래프 만들기","text":"R로 만들 수 있는 그래프 살펴보기 ggplot2 : 그래프를 만들 때 가장 많이 사용하는 패키지 ggplot2 레이어 : 배경 설정(축) - 그래프 추가(점, 막대, 선) - 설정 추가(축 범위, 색, 표식) 산점도 - 변수 간 관계 표현하기 산점도(Scater Plot) : 데이터를 x축과 y축에 점으로 표현한 그래프 나이와 소득처럼 연속 값으로 된 두 변수의 관계를 표현할 때 사용 산점도 만들기12345678910111213' x축 y축 지정 'ggplot(data = mpg, aes(x = displ, y = hwy))' 배경에 산점도 추가 'ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()' 축 범위 지정'ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + xlim(3, 6)ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + xlim(3, 6) + ylim(10, 30) 실습123456789101112131415161718'Q1. mpg 데이터의 cty(도시 연비)와 hwy(고속도로 연비) 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 cty, y축은 hwy로 된 산점도를 만들어보세요.'ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point()'Q2. 미국 지역별 인구통계 정보를 담은 ggplot2 패키지의 midwest 데이터를 이용해 전체 인구와 아시아인 인구 간에 어떤 관계가 있는지 알아보려고 합니다. x축은 poptotal(전체 인구), y축은 popasian(아시아인 인구)으로 구성된 산점도를 만들어 보세요. 전체 인구는 50만 명 이하, 아시아인 인구는 1만 명 이하인 지역만 산점도에 표시되게 설정하세요.'ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point() + xlim(0, 500000) + ylim(0, 10000) 막대 그래프 - 집단 간 차이 표현하기 막대 그래프(Bar chart) : 데이터의 크기를 막대의 길이로 표현 성별 소득 차이처럼 집단 간 차이를 표현할 때 주로 사용 평균 막대 그래프 만들기12345678910111213141516171819202122install.packages(\"dplyr\")library(dplyr)mpg &lt;- as.data.frame(ggplot2::mpg)' 집단별 평균표 만들기 'df_mpg &lt;- mpg %&gt;% group_by(drv) %&gt;% summarise(mean_hwy = mean(hwy))df_mpg' 그래프 생성하기 'ggplot(data = df_mpg, aes(x = drv, y = mean_hwy)) + geom_col()' 크기 순으로 정렬하기 'ggplot(data = df_mpg, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) + geom_col()' 빈도 막대 그래프 만들기 'ggplot(data = mpg, aes(x = drv)) + geom_bar()ggplot(data = mpg, aes(x = hwy)) + geom_bar() 실습1234567891011121314151617181920212223'Q1. 어떤 회사에서 생산한 \"suv\" 차종의 도시 연비가 높은지 알아보려고 합니다. \"suv\"차종을 대상으로 평균 cty(도시 연비)가 가장 높은 회사 다섯 곳을 막대 그래프로 표현해 보세요. 막대는 연비가 높은 순으로 정렬하세요.'mpg %&gt;% head()df_mpg &lt;- mpg %&gt;% filter(class == \"suv\") %&gt;% group_by(manufacturer) %&gt;% summarise(cty_mean = mean(cty)) %&gt;% arrange(desc(cty_mean)) %&gt;% head(5)ggplot(data = df_mpg, aes(x = reorder(manufacturer, -cty_mean), y = cty_mean)) + geom_col()'Q2. 자동차 중에서 어떤 class(자동차 종류)가 가장 많은지 알아보려고 합니다. 자동차 종류별 빈도를 표현한 막대 그래프를 만들어 보세요.'ggplot(data = mpg, aes(x=class))+geom_bar() 선 그래프 - 시간에 따라 달라지는 데이터 표현하기 선 그래프(Line Chart) : 데이터를 선으로 표현한 그래프 시간에 따라 달라지는 데이터를 표현할 때 사용 (환율, 주가지수 등 경제지표) 시계열 데이터(Time Series Data) : 일정 시간 간격을 두고 나열된 데이터 시계열 그래프(Rime Series Chart) : 시계열 데이터를 선으로 표현한 그래프 시계열 그래프 만들기1ggplot(data = economics, aes(x = date, y = unemploy)) + geom_line() 실습12345'Q1. psavert(개인 저축률)가 시간에 따라 어떻게 변해 왔는지 알아보려고 합니다. 시간에 따른 개인 저축률의 변화를 나타낸 시계열 그래프를 만들어보세요.'ggplot(data = economics, aes(x = date, y = psavert)) + geom_line() 상자 그림 - 집단 간 분포 차이 표현하기 상자 그림(Box Plot) : 데이터의 분포를 직사각형 상자 모양으로 표현한 그래프 상자 그림 만들기1ggplot(data = mpg, aes(x = drv, y = hwy)) + geom_boxplot() 실습12345678Q1. class(자동차 종류)가 \"compact\", \"subcompact\", \"suv\"인 자동차의 cty(도시 연비)가 어떻게 다른지 비교해 보려고 합니다. 세 차종의 cty를 나타낸 상자 그림을 만들어 보세요.'df_mpg &lt;- mpg %&gt;% filter(class %in% c(\"compact\", \"subcompact\", \"suv\"))ggplot(data = df_mpg, aes(x = class, y = cty)) + geom_boxplot() ##정리 123456789101112131415161718192021222324252627282930' 1. 산점도 'ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()' 축 설정 추가 'ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + xlim(3,6) + ylim(10,30)' 2. 평균 막대 그래프 '' 1단계. 평균표 만들기 'df_mpg &lt;- mpg %&gt;% group_by(drv) %&gt;% summarise(mean_hwy = mean(hwy))' 2단계. 그래프 생성하기, 크기순 정렬하기 'ggplot(data = df_mpg, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) + geom_col()' 3. 빈도 막대 그래프 'ggplot(data = mpg, aes(x = drv)) + geom_bar()' 4. 선 그래프 'ggplot(data = economics, aes(x = date, y = unemploy)) + geom_line()' 5. 상자 그림 'ggplot(data = mpg, aes(x = drv, y = hwy)) + geom_boxplot()","link":"/2020/07/25/R-2020-07-25-CHAPTER08/"},{"title":"데이터 분석 프로젝트 &#39;한국인의 삶을 파악하라&#39;","text":"‘한국복지패널데이터’ 분석 준비하기데이터 분석 준비하기123456789101112131415161718192021222324252627282930313233343536# 데이터 준비하기# [한국복지패널데이터 다운로드](bit.ly/doit_rb)# 패키지 설치 및 로드하기install.packages(\"foreign\") # foreign 패키지 설치library(foreign) # SPSS 파일 불러오기library(dplyr) # 전처리library(ggplot2) # 시각화library(readxl) # 엑셀 파일 불러오기# 데이터 불러오기getwd()raw_welfare &lt;- read.spss(file = \"Koweps_hpc10_2015_beta1.sav\", to.data.frame = T)welfare &lt;- raw_welfare# 데이터 검토하기 head(welfare)tail(welfare)View(welfare)dim(welfare)str(welfare)summary(welfare)# 변수명 바꾸기welfare &lt;- rename(welfare, sex = h10_g3, # 성별 birth = h10_g4, # 태어난 연도 marriage = h10_g10, # 혼인 상태 religion = h10_g11, # 종교 income = p1002_8aq1, # 월급 code_job = h10_eco9, # 직업 코드 code_region = h10_reg7) # 지역 코드 데이터 분석 절차 1단계. 변수 검토 및 전처리 2단계. 변수 간 관계 분석 성별에 따른 월급 차이성별 변수 검토 및 전처리123456789101112131415# 변수 검토하기class(welfare$sex)table(welfare$sex)# 전처리' 이상치 확인 'table(welfare$sex)' 이상치 결측 처리 'welfare$sex &lt;- ifelse(welfare$sex == 9, NA, welfare$sex)' 결측치 확인 'table(is.na(welfare$sex))' 성별 항목 이름 부여 'welfare$sex &lt;- ifelse(welfare$sex == 1, \"male\", \"female\")table(welfare$sex)qplot(welfare$sex) 월급 변수 검토 및 전처리123456789101112# 변수 검토하기class(welfare$income)summary(welfare$income)qplot(welfare$income) + xlim(0, 1000)# 전처리' 이상치 확인 'summary(welfare$income)' 이상치 결측 처리 'welfare$income &lt;- ifelse(welfare$income %in% c(0, 9999), NA, welfare$income)' 결측치 확인 'table(is.na(welfare$income)) 성별에 따른 월급 차이 분석하기123456789# 성별 월급 평균표 만들기sex_income &lt;- welfare %&gt;% filter(!is.na(income)) %&gt;% group_by(sex) %&gt;% summarise(mean_income = mean(income))sex_income# 그래프 만들기ggplot(data = sex_income, aes(x = sex, y = mean_income)) + geom_col() 나이와 월급의 관계연령대에 따른 월급 차이연령대 및 성별 월급 차이직업별 월급 차이성별 직업 빈도종교 유무에 따른 이혼율지역별 연령대 비율","link":"/2020/08/18/R-2020-08-18-CHAPTER09/"},{"title":"대학원 첫걸음","text":"대학원 진학대학원에 진학하게 되었다. 19년 말 직장을 관두면서 재취업 혹은 대학원 진학을 희망하고 있었는데 어쩌다보니 일을 반년이나 하게되었다. 일을 하면서 어영부영 지원한 20년도 2학기 신입학은 낙방 21년도 1학기는 합격해 올해는 다시 캠퍼스 생활을 하게 되었다. 대학원 입시일을 하면서 준비하느라 충분히 준비했다고는 못하겠다. (일을 하고 있다는 핑계를 대면서 떨어지면 놀이동산 기숙알바를 지원하려고 했으니 말다했지뭐) 3~4군데 정도 지원했고, 2군데 학교에서 1차 합격 연락을 받았고 면접을 보게 되었다. 서울 소재 대학은 대면 면접, 울산 소재 대학은 비대면 면접으로 이뤄졌다. 면접기간에 한창 바빴다 왕복 2시간을 매일 할애하며 인천-서울 출퇴근을 했고 다소 갑작스럽게 맡게된 편집일(240시간 분량, 다시 생각해도 미쳤었다)과 강의 제작일이 겹쳐(강의 준비부터 촬영, 편집까지 모두 혼자 했다) 야근은 기본, 밤샘도 여러차례, 어떤 날에는 다리가 퉁퉁부어 쪼그려 앉지도 못했다. 뭐 구구절절 얘기 했지만 그래봤자 핑계이고 결론은 면접 대비가 엉망이었다는것..ㅎ 면접서울 소재 대학은 지난 학기에도 지원했던 곳이라 동일한 장소에서 면접을 진행했다. 답변도 반정도 밖에 하지 못해서 사실 또 한번 떨어지겠구나 하는 생각을 했다. 두번째 비대면 면접도 밤을 새고 비몽사몽한 상태로 진행했는데, 시작하자마자 영어 면접이라는 말에 준비 안했다고 떼를 썼다. (멍청한건지 용감한건지) 결국 한국어로 면접을 진행했고 영어면접에 ‘준비안했는데 어쩌라고요^^’를 시전한 스스로가 어이가 없었다. 결과는 두군데 모두 합격 wow 입학 준비이 글은 요새 엄청난 감정기복을 기록하기 위한 글이다. 솔직히 요새 너무 힘들다. 하하. 많은 일이 겹쳐 예민해진 상태에서 겪는 이런 저런 일들에 감정이 이리저리 난리도 아니다. 차분히 기록을 하면서 기분이 태도가 되지 않기를 다짐하고, 나중에 가서는 이럴때도 있었구나 하는 기록이 되겠지 싶어서.. 뭐 대학원에 합격하고는 당연히 기분이 좋았다. 두군데에 합격해 어느 곳에 갈지 결정하느라 며칠을 머리를 싸매고 고민했다. 다음은 집구하기, 대출을 끼고 전세로 들어갈 만한 집을 찾는데 처음 본 한군데가 적절하고 마음에 들었다. 하지만 다음날 바로 다른 사람이 계약을 해버렸다. 결국은 세군데 정도 더 보고 처음 마음에 들었던 건물에 다른 층에 들어가기로 했다. 묶여있는 돈이 있어서 반전세 -&gt; 전세로 전환하기로 하였으나 임대인이 거절해서 입주가 많이 밀렸다. 계약을 위해 대출을 알아보는데 원래 하기로 했던 카카오 대출에서 불가 판정을 받아서 또 골치 아팠고, 다행히 다른 은행에서 대출이 가능하다고 해서 계약을 진행했다. 그렇지만 여전히 입주는 4월이라 2,3월은 뭐 기차나 실컷 타게 생겼다. 그리고는 또 갑자기 등록금에 문제가 생겨 당장 2일뒤인 등록금대출이 필요했고, 다행히 대학원 등록금은 처리가 빨라 금방 해결되었다. 또 막상 이렇게 적고 보니 지금 당장 읽어봐도 별일 아닌것 같아 보이네.. 머쓱.. 그렇지만 요새 정말 여러 상황이 겹쳐 감정이 오락가락 난리도 아니다. 이번달에는 일단 2개 강의 운영과 3개의 사전강의 수강이 있고…. 3째주부터는 또 KTX를 타고 출퇴근을 하게 생겼다.e 음 어떻게든 되겠지! ‘자기비하 절대금지’라는 말을 새기면서 열심히 그리고 행복하게만 살자. 나자신 화이팅 허허.","link":"/2021/01/29/etc-2021-01-29-01/"},{"title":"집떠나와 연구실 출근","text":"어제는 집을 나왔다 자취생활을 접고 본가에 들어간지 정확히 1년만에 집에서 나왔다들어갈땐 정말 싫었는데 정신없이 1년을 보냈더니 나올때는 너무 아쉬웠다그래서 차도 미루고 미루다 깜깜해지고 나서야 짐을 챙겨 나왔다 결국 숙소는 3월까지 따로 잡고 4월에 계약한 집으로 이사가는 걸로….기차타고 출퇴근할 엄두가 안나서 그냥 가까운 곳으로 자리를 잡아버렸다다소 급하게 잡았는데 막상 와보니 엘리베이터가 없는곳이라 너무 불편했다3층까지 캐리어를 이고지고 올라가느라 땀을 뻘뻘 흘리고마트가 곧 문닫을 시간이어서 급하게 달려가서 필요한것들도 사고 오자마자 바빴다1년만에 다시 집을 나왔더니 기분이 싱숭생숭해서 잠도 잘 안오고 밤을 새다시피 했다 비몽사몽 출근하고 연구실 사람들을 만나고 점심을 같이 먹었다으레 연구실이 다 그렇듯 점심이 되서 뭘먹지 하는 소리가 나왔다 새삼 다시 연구실이라는데를 왔구나 실감이 났다 ㅋㅋㅋ언급된 메뉴가 돈까스, 제육 순으로 한치에 오차도 없이 한국인의 소울푸드가 나와서 너무 웃겼다밤을 새서 정신도 없고 그 상황이 웃겨서 밥먹으면서 웃음을 참았더니 뭐가 그렇게 웃기냐고 물어봤다웃으면 안되는건가… 큰일났다 나 웃음 많은데…. 오전에는 계속 듣던 강의를 듣고 (이번에 또 새로운 교수님이 강의 해주시는데 재밌었다)오후에는 조교 면접, 다행히 농협에서 보조강사 했던 경험이 있어서 할 말이 있었다만약 하게되면 비전공자를 대상으로 하는 파이썬 조교에 들어갈텐데 오랜만이라 조금 신나기도 한다 지난번에 조교 필기테스트 보러왔을 때만 해도 출입카드가 없어서 도둑도 아니고 ㅜ 누가 열 때까지 기다렸다가 들어갔는데오늘은 임시지만 출입증을 받았다… 이제 도둑같이 안다녀도 된다….일하느라 못들었던 강의도 챙겨들어야하고, 오늘 왔더니 앞으로 과제는 블록체인쪽일 것 같고,개발 얘기를 하면서 GO랑… node.js 얘기도 나왔다… 세상에 얼마만에 듣는….당분간 공부를 열심히 해야할 것 같다 지금…. 블로그나 쓸때가 아닌가….","link":"/2021/02/22/etc-2021-02-22-01/"}],"tags":[{"name":"R","slug":"R","link":"/tags/R/"},{"name":"RStudio","slug":"RStudio","link":"/tags/RStudio/"},{"name":"R 설치","slug":"R-설치","link":"/tags/R-%EC%84%A4%EC%B9%98/"},{"name":"R스튜디오 설치","slug":"R스튜디오-설치","link":"/tags/R%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4-%EC%84%A4%EC%B9%98/"},{"name":"R programming","slug":"R-programming","link":"/tags/R-programming/"},{"name":"R데이터","slug":"R데이터","link":"/tags/R%EB%8D%B0%EC%9D%B4%ED%84%B0/"},{"name":"r","slug":"r","link":"/tags/r/"},{"name":"R언어","slug":"R언어","link":"/tags/R%EC%96%B8%EC%96%B4/"},{"name":"R스튜디오","slug":"R스튜디오","link":"/tags/R%EC%8A%A4%ED%8A%9C%EB%94%94%EC%98%A4/"},{"name":"IT잡담","slug":"IT잡담","link":"/tags/IT%EC%9E%A1%EB%8B%B4/"},{"name":"주저리주저리","slug":"주저리주저리","link":"/tags/%EC%A3%BC%EC%A0%80%EB%A6%AC%EC%A3%BC%EC%A0%80%EB%A6%AC/"},{"name":"github블로그","slug":"github블로그","link":"/tags/github%EB%B8%94%EB%A1%9C%EA%B7%B8/"},{"name":"헥소","slug":"헥소","link":"/tags/%ED%97%A5%EC%86%8C/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"헥소 블로그","slug":"헥소-블로그","link":"/tags/%ED%97%A5%EC%86%8C-%EB%B8%94%EB%A1%9C%EA%B7%B8/"},{"name":"adsense","slug":"adsense","link":"/tags/adsense/"},{"name":"hexo adsense","slug":"hexo-adsense","link":"/tags/hexo-adsense/"},{"name":"hexo블로그","slug":"hexo블로그","link":"/tags/hexo%EB%B8%94%EB%A1%9C%EA%B7%B8/"},{"name":"hexo image","slug":"hexo-image","link":"/tags/hexo-image/"},{"name":"R filter","slug":"R-filter","link":"/tags/R-filter/"},{"name":"select","slug":"select","link":"/tags/select/"},{"name":"arrange","slug":"arrange","link":"/tags/arrange/"},{"name":"mutate","slug":"mutate","link":"/tags/mutate/"},{"name":"simmarise","slug":"simmarise","link":"/tags/simmarise/"},{"name":"group_by","slug":"group-by","link":"/tags/group-by/"},{"name":"left_join","slug":"left-join","link":"/tags/left-join/"},{"name":"bind_rows","slug":"bind-rows","link":"/tags/bind-rows/"},{"name":"R정렬","slug":"R정렬","link":"/tags/R%EC%A0%95%EB%A0%AC/"},{"name":"R 데이터 합치기","slug":"R-데이터-합치기","link":"/tags/R-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%95%A9%EC%B9%98%EA%B8%B0/"},{"name":"R 행 추출","slug":"R-행-추출","link":"/tags/R-%ED%96%89-%EC%B6%94%EC%B6%9C/"},{"name":"R 행 추가","slug":"R-행-추가","link":"/tags/R-%ED%96%89-%EC%B6%94%EA%B0%80/"},{"name":"R결측치","slug":"R결측치","link":"/tags/R%EA%B2%B0%EC%B8%A1%EC%B9%98/"},{"name":"NA","slug":"NA","link":"/tags/NA/"},{"name":"결측치 처리","slug":"결측치-처리","link":"/tags/%EA%B2%B0%EC%B8%A1%EC%B9%98-%EC%B2%98%EB%A6%AC/"},{"name":"결측치 제거","slug":"결측치-제거","link":"/tags/%EA%B2%B0%EC%B8%A1%EC%B9%98-%EC%A0%9C%EA%B1%B0/"},{"name":"결측치 대체","slug":"결측치-대체","link":"/tags/%EA%B2%B0%EC%B8%A1%EC%B9%98-%EB%8C%80%EC%B2%B4/"},{"name":"이상치 정하기","slug":"이상치-정하기","link":"/tags/%EC%9D%B4%EC%83%81%EC%B9%98-%EC%A0%95%ED%95%98%EA%B8%B0/"},{"name":"이상치 제거하기","slug":"이상치-제거하기","link":"/tags/%EC%9D%B4%EC%83%81%EC%B9%98-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0/"},{"name":"R 변수","slug":"R-변수","link":"/tags/R-%EB%B3%80%EC%88%98/"},{"name":"R문자열","slug":"R문자열","link":"/tags/R%EB%AC%B8%EC%9E%90%EC%97%B4/"},{"name":"데이터 프레임","slug":"데이터-프레임","link":"/tags/%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%94%84%EB%A0%88%EC%9E%84/"},{"name":"R 데이터 프레임","slug":"R-데이터-프레임","link":"/tags/R-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%94%84%EB%A0%88%EC%9E%84/"},{"name":"Hello R","slug":"Hello-R","link":"/tags/Hello-R/"},{"name":"R 언어","slug":"R-언어","link":"/tags/R-%EC%96%B8%EC%96%B4/"},{"name":"R 데이터","slug":"R-데이터","link":"/tags/R-%EB%8D%B0%EC%9D%B4%ED%84%B0/"},{"name":"R 프로그래밍","slug":"R-프로그래밍","link":"/tags/R-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/"},{"name":"R 장점","slug":"R-장점","link":"/tags/R-%EC%9E%A5%EC%A0%90/"},{"name":"R 이란","slug":"R-이란","link":"/tags/R-%EC%9D%B4%EB%9E%80/"},{"name":"R Python","slug":"R-Python","link":"/tags/R-Python/"},{"name":"R 그래프","slug":"R-그래프","link":"/tags/R-%EA%B7%B8%EB%9E%98%ED%94%84/"},{"name":"R Studio","slug":"R-Studio","link":"/tags/R-Studio/"},{"name":"R 산점도 그래프","slug":"R-산점도-그래프","link":"/tags/R-%EC%82%B0%EC%A0%90%EB%8F%84-%EA%B7%B8%EB%9E%98%ED%94%84/"},{"name":"R 막대 그래프","slug":"R-막대-그래프","link":"/tags/R-%EB%A7%89%EB%8C%80-%EA%B7%B8%EB%9E%98%ED%94%84/"},{"name":"R 평균 막대 그래프","slug":"R-평균-막대-그래프","link":"/tags/R-%ED%8F%89%EA%B7%A0-%EB%A7%89%EB%8C%80-%EA%B7%B8%EB%9E%98%ED%94%84/"},{"name":"R 빈도 막대 그래프","slug":"R-빈도-막대-그래프","link":"/tags/R-%EB%B9%88%EB%8F%84-%EB%A7%89%EB%8C%80-%EA%B7%B8%EB%9E%98%ED%94%84/"},{"name":"R 선그래프","slug":"R-선그래프","link":"/tags/R-%EC%84%A0%EA%B7%B8%EB%9E%98%ED%94%84/"},{"name":"R 상자 그림","slug":"R-상자-그림","link":"/tags/R-%EC%83%81%EC%9E%90-%EA%B7%B8%EB%A6%BC/"},{"name":"산점도 그래프","slug":"산점도-그래프","link":"/tags/%EC%82%B0%EC%A0%90%EB%8F%84-%EA%B7%B8%EB%9E%98%ED%94%84/"},{"name":"막대 그래프","slug":"막대-그래프","link":"/tags/%EB%A7%89%EB%8C%80-%EA%B7%B8%EB%9E%98%ED%94%84/"},{"name":"평균 막대 그래프","slug":"평균-막대-그래프","link":"/tags/%ED%8F%89%EA%B7%A0-%EB%A7%89%EB%8C%80-%EA%B7%B8%EB%9E%98%ED%94%84/"},{"name":"빈도 막대 그래프","slug":"빈도-막대-그래프","link":"/tags/%EB%B9%88%EB%8F%84-%EB%A7%89%EB%8C%80-%EA%B7%B8%EB%9E%98%ED%94%84/"},{"name":"선 그래프","slug":"선-그래프","link":"/tags/%EC%84%A0-%EA%B7%B8%EB%9E%98%ED%94%84/"},{"name":"상자 그림","slug":"상자-그림","link":"/tags/%EC%83%81%EC%9E%90-%EA%B7%B8%EB%A6%BC/"},{"name":"box 그래프","slug":"box-그래프","link":"/tags/box-%EA%B7%B8%EB%9E%98%ED%94%84/"},{"name":"일기","slug":"일기","link":"/tags/%EC%9D%BC%EA%B8%B0/"},{"name":"대학원 준비","slug":"대학원-준비","link":"/tags/%EB%8C%80%ED%95%99%EC%9B%90-%EC%A4%80%EB%B9%84/"},{"name":"대학원 진학","slug":"대학원-진학","link":"/tags/%EB%8C%80%ED%95%99%EC%9B%90-%EC%A7%84%ED%95%99/"},{"name":"대학원 입시","slug":"대학원-입시","link":"/tags/%EB%8C%80%ED%95%99%EC%9B%90-%EC%9E%85%EC%8B%9C/"},{"name":"학자금 대출","slug":"학자금-대출","link":"/tags/%ED%95%99%EC%9E%90%EA%B8%88-%EB%8C%80%EC%B6%9C/"},{"name":"대학원 일기","slug":"대학원-일기","link":"/tags/%EB%8C%80%ED%95%99%EC%9B%90-%EC%9D%BC%EA%B8%B0/"}],"categories":[{"name":"R","slug":"R","link":"/categories/R/"},{"name":"잡담","slug":"잡담","link":"/categories/%EC%9E%A1%EB%8B%B4/"},{"name":"hexo","slug":"hexo","link":"/categories/hexo/"}]}